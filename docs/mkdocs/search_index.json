{
    "docs": [
        {
            "location": "/", 
            "text": "OPAL Documentation\n\n\nOPAL is a full stack framework that makes building digital tools for health care easy.\n\n\n\n\nOPAL builds deep clinical domain specific functionality on top of\n\nDjango\n, \nAngular\n\nand \nBootstrap\n to help developers quickly build easy to maintain,\nrobust clinical applications.\n\n\nThis is the developer documentation.\n\n\nOPAL is an entirely Open \nSource\n,\nOpen \nGovernance\n product, as are the wide library of plugins.\n\n\nFirst Steps\n\n\nIf you're new to OPAL, then you'll want to take a look at the\n\nInstallation instructions\n, and then maybe take the\n\ntutorial\n.\n\n\nFull documentation\n\n\nWhile \nTopic guides\n are available for many key areas of OPAL,\nthe \nDetailed reference material\n is a work in progress.\n\n\nIf you find any issues or missing areas of this documentation, please do raise it with the\nteam on the \nGithub issue tracker\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#opal-documentation", 
            "text": "OPAL is a full stack framework that makes building digital tools for health care easy.   OPAL builds deep clinical domain specific functionality on top of Django ,  Angular \nand  Bootstrap  to help developers quickly build easy to maintain,\nrobust clinical applications.  This is the developer documentation.  OPAL is an entirely Open  Source ,\nOpen  Governance  product, as are the wide library of plugins.  First Steps  If you're new to OPAL, then you'll want to take a look at the Installation instructions , and then maybe take the tutorial .  Full documentation  While  Topic guides  are available for many key areas of OPAL,\nthe  Detailed reference material  is a work in progress.  If you find any issues or missing areas of this documentation, please do raise it with the\nteam on the  Github issue tracker .", 
            "title": "OPAL Documentation"
        }, 
        {
            "location": "/installation/", 
            "text": "Installing OPAL\n\n\nInstallation should be simple.\n\n\nStep 1: The Prerequisites\n\n\nBefore you install OPAL, you'll need to make sure that you have \n\nPython\n and \npip\n\ninstalled on your system.\n\n\nLet's just check that you do:\n\n\n$ python --version\nPython 2.7.5\n$ pip --version\npip 1.5.6\n\n\n\nStep 2: Use Pip\n\n\nNow we can install OPAL using pip:\n\n\n$ pip install opal\n\n\n\nYou should now have the \nopal\n commandline tools installed.\n\n\nLet's just check that you do:\n\n\n$ opal --version\nOPAL 0.3.0\n\n\n\nStep 3: There is no step 3.\n\n\nMaybe make yourself somme tea \n then try the \nTutorial\n instead ?", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installing-opal", 
            "text": "Installation should be simple.  Step 1: The Prerequisites  Before you install OPAL, you'll need to make sure that you have  Python  and  pip \ninstalled on your system.  Let's just check that you do:  $ python --version\nPython 2.7.5\n$ pip --version\npip 1.5.6  Step 2: Use Pip  Now we can install OPAL using pip:  $ pip install opal  You should now have the  opal  commandline tools installed.  Let's just check that you do:  $ opal --version\nOPAL 0.3.0  Step 3: There is no step 3.  Maybe make yourself somme tea   then try the  Tutorial  instead ?", 
            "title": "Installing OPAL"
        }, 
        {
            "location": "/tutorial/", 
            "text": "Writing a clinical service with OPAL\n\n\nThis tutorial will walk you through the creation of a new OPAL service.\n\n\nThe application we're going to be building will help clinical users to manage the patients on a ward in a hospital.\n\n\n\nAs a Doctor \n\nI want to know what's going on with the patients under my care\n\nSo that I can treat them effectively and safely.\n\n\n\n\nBootstrapping a new project\n\n\nWe assume that you've already \nInstalled OPAL\n. You can tell which version of opal is installed\nby running this command\n\n\n$ opal --version\n\n\n\nAt the start a new project, OPAL will bootstrap the initial project structure, including\na Djano project, some core datamodels (complete with JSON APIs) and a general application structure.\n\n\nFrom the commandline:\n\n\n$ opal startproject mynewapp\n\n\n\nThis will create a mynewap directory where your new project lives.\n\n\nLet's have a look at what that created for you:\n\n\nmynewapp/                   # Your project directory\n    LICENSE                 # A dummy LICENSE file\n    Procfile                # A procfile ready for deployment to e.g. Heroku\n    README.md\n    manage.py               # Django's manage.py script\n    requirements.txt        # Requirements file ready for your project\n\n    data/                   # A dummy directory for fixtures\n\n    mynewapp/               # The actual python package for your application\n         __init__.py\n        flow.py             # How patients move through your services\n        models.py           # Data models for your application\n        schema.py           # The list schemas for your application\n        settings.py         # Helpfully tweaked Django settings\n        tests.py            # Dummy unittests\n        urls.py             # Django Urlconf\n        wsgi.py\n\n        assets/             # Your static files directory\n        templates/          # Your template directory\n        migrations/         # Your Database migrations directory\n\n        opal.sqlite         # The Sqlite development database\n\n\n\nTest it out\n\n\nThe scaffolding step has generated you a working project - so let's check that out\n\n\ncd mynewapp\npython manage.py runserver\n\n\n\nIf you now visit \nhttp://localhost:8000\n in your browser, you should see the standard login screen:\n\n\n\n\nThe scaffolding step created you a superuser, so try logging in with the credentials:\n\n\n\n\nUsername: \nsuper\n\n\nPassword:  \nsuper1\n\n\n\n\nWhen you log in you should be presented with a welcome screen that shows you the three\nareas that are enabled by default - team lists, search and the admin area.\n\n\n\n\nOPAL applications are a collection of single page Angular apps that talk to the Django\nserver-side layer via JSON APIs. The Team Lists and Search options here are two examples of\nfront-end Angular single page apps.\n\n\nTeam lists\n\n\nMost clinical services will need at some stage to generate a list of patients - so OPAL provides\nthis functionality enabled by default.\n\n\nThe \nlist view\n is a spreadhseet-style list of patients - try navigating\nto the list view and adding a patient with the \nadd patient\n button.\n\n\n\n\nEach column contains a different type of information about a patient, while each\nrow represents one patient.\n\n\n\nStrictly speaking each row is an \nepisode\n\nof care for a patient - but we'll come to that in a second.\n\n\n\n\nThe columns you see initially are just a few of the standard clinical models that come with\nOPAL - for instance the Diagnosis model in your new application inherits from a model that\nlooks a lot like this:\n\n\nclass Diagnosis(EpisodeSubrecord):\n    condition         = ForeignKeyOrFreeText(Condition)\n    provisional       = models.BooleanField(default=False)\n    details           = models.CharField(max_length=255, blank=True)\n    date_of_diagnosis = models.DateField(blank=True, null=True)\n\n    class Meta:\n        abstract = True\n\n\n\nLookup Lists\n\n\nYou will notice that the condition field has a custom field type - \nForeignKeyOrFreeText\n.\nThis is a custom field type that we use with OPAL when we want to use a\n\nLookup List\n.\n\n\nLookup Lists allow us to reference canonical lists of available terminology as a foreign key, while\nalso allowing synonymous terms, and a free text override. That means that we can ensure that\nwe record high quality coded data, while allowing users an easy way to enter unusual edge\ncases.\n\n\nYou'll need to import the data for a terminology before you can start to take advantage of that.\nFor now, let's use the reference data from elCID (An OPAL application maintained by Open Health Care):\n\n\nwget https://raw.githubusercontent.com/openhealthcare/elcid/master/data/lookuplists/lookuplists.json -P data/lookuplists\n\n\n\n\nBy convention, we store data in the \n./data/lookuplists\n directory of our project.\n\n\n\n\nNow let's import the data:\n\n\npython manage.py load_lookup_lists -f data/lookuplists/lookuplists.json\n\n\n\nNow refresh your application and try adding a new diagnosis to your patient. As you start to type in\nthe condition field, you'l see that the conditions we just imported appear as suggestions:\n\n\n\n\nAdd your own data models\n\n\nSo far we've begun to get a sense of the batteries-included parts of OPAL,\nbut before long, you're going to need to create models for your own needs.\n\n\nMost OPAL models are \nSubrecords\n - they relate to either a patient, or\nan episode (an episode is for example, an admission to hospital).\n\n\nLet's see how that works by creating a TODO list model that is assigned to\nepisodes of care. In your \nmynewapp/models.py\n :\n\n\nclass TODOItem(models.EpisodeSubrecord):\n    job       = fields.CharField(max_length=200)\n    due_date  = fields.DateField(blank=True, null=True)\n    details   = fields.TextField(blank=True, null=True)\n    completed = fields.BooleanField(default=False)\n\n\n\nThis is simply a Django model, apart from the parent class \nmodels.EpisodeSubrecord\n\nwhich provides us with some extra functionality:\n\n\n\n\nA relationship to an episode, linked to a patient\n\n\nJSON APIs for creating, retrieving and updating it\n\n\nEnsuring that the OPAL Angular layer knows it exists\n\n\n\n\nNext, we're going to let OPAL take care of the boilerplate that we'll need to use this\nmodel in our application. From the commandline:\n\n\n$ opal scaffold mynewapp\n\n\n\nLet's take a look at what that did:\n\n\n\n\nIt created a Django migration\n\n\nIt created a detail template \nmynewapp/templates/records/todo_item.html\n\n\nIt created a form template \nmynewapp/templates/modals/todo_item_modal.html\n\n\n\n\nDetail template\n\n\nThe default detail template simply displays each field on a new line:\n\n\nspan ng-show=\"item.job\"\n[[ item.job ]] \nbr /\n/span\n\n\nspan ng-show=\"item.due_date\"\n[[ item.due_date  | shortDate ]] \nbr /\n/span\n\n\nspan ng-show=\"item.details\"\n[[ item.details ]] \nbr /\n/span\n\n\nspan ng-show=\"item.completed\"\n[[ item.completed ]] \nbr /\n/span\n\n\n\n\nForm template\n\n\nThe default form template will display each field on a new line, with some basic\nappropriate form field types set.\nIt uses the OPAL form helpers templatetag library.\n\n\n{% extends 'modal_base.html' %}\n{% load forms %}\n{% block modal_body %}\n  \nform class=\"form-horizontal\"\n\n   {% input  label=\"Job\" model=\"editing.job\"  %}\n   {% datepicker  label=\"Due Date\" model=\"editing.due_date\"  %}\n   {% textarea  label=\"Details\" model=\"editing.details\"  %}\n   {% checkbox  label=\"Completed\" model=\"editing.completed\"  %}\n  \n/form\n\n{% endblock %}\n\n\n\nAdding TODOs to our Team Lists\n\n\nNow let's add our TODO list model as a column in the Spreadsheet-like list view.\n\n\nThe columns for team lists are set in \nmynewapp/schema.py\n as a list of models.\n\n\nOpen mynewapp/schemas.py and edit the \nlist_columns\n variable to add \nmodels.TODOItem\n as\nthe final item:\n\n\nlist_columns = [\n    models.Demographics,\n    models.Location,\n    models.Allergies,\n    models.Diagnosis,\n    models.PastMedicalHistory,\n    models.Treatment,\n    models.Investigation,\n    models.TODOItem\n]\n\n\n\nRefresh the lists page in your browser, and you'll see your new column on the end - add a\nTODO item, noting how we automatically get appropriate form types like datepickers and\ncheckboxes.\n\n\nYou can edit any entry in the list view by double clicking on it.\n\n\nTweaking the default scaffolding\n\n\nThe scaffolding templates are only really supposed to get you started - you'll often\nneed to tweak the templates they generate with whatever logic makes sense for your\napplication.\n\n\nFor us, you'll notice that the value of \nTODOItem.completed\n simply displays as false -\nwhich is not particularly useful. So let's update that using the OPAL\n\nBoxed filter\n. In \nmynewapp/templates/records/todo_item.html\n\nchange the last line to look like this:\n\n\nspan ng-show=\"item.completed\"\n[[ item.completed | boxed ]] \nbr /\n/span\n\n\n\n\nSet an Icon for your model\n\n\nYou'll notice that your new column is the only one without an icon - we set the icon by\nadding the following property to your \nTODOItem\n class:\n\n\n    _icon = 'fa fa-th-list'\n\n\n\nSome other batteries included\n\n\nLet's take a look at some of the other core functionality that we now have out of the box:\n\n\nSearch\n\n\nBy default, we also enable the search module, which allows you to search by patient name\nor unique identifier:\n\n\n\n\nDetail views\n\n\nWe also have a detail view for our patients, which you can access via search results. This\nview will typically allow for a more detailed display and editing of all the events\ncomprising an activity of care than is available on the list page.\n\n\n\n\nJSON APIs\n\n\nOPAL automatically creates self-documenting JSON APIs for your interacting with the data\nin your application. You can inspect these APIs interactively at the url:\n\n\nhttp://localhost:8000/api/v0.1/\n\n\n\n\n\nWhat next?\n\n\nThis is just a glimpse at the full range of functionality that comes with OPAL - there is\nmuch more to discover in the \nTopic Guides\n.", 
            "title": "Tutorial"
        }, 
        {
            "location": "/tutorial/#writing-a-clinical-service-with-opal", 
            "text": "This tutorial will walk you through the creation of a new OPAL service.  The application we're going to be building will help clinical users to manage the patients on a ward in a hospital.  \nAs a Doctor  \nI want to know what's going on with the patients under my care \nSo that I can treat them effectively and safely.  Bootstrapping a new project  We assume that you've already  Installed OPAL . You can tell which version of opal is installed\nby running this command  $ opal --version  At the start a new project, OPAL will bootstrap the initial project structure, including\na Djano project, some core datamodels (complete with JSON APIs) and a general application structure.  From the commandline:  $ opal startproject mynewapp  This will create a mynewap directory where your new project lives.  Let's have a look at what that created for you:  mynewapp/                   # Your project directory\n    LICENSE                 # A dummy LICENSE file\n    Procfile                # A procfile ready for deployment to e.g. Heroku\n    README.md\n    manage.py               # Django's manage.py script\n    requirements.txt        # Requirements file ready for your project\n\n    data/                   # A dummy directory for fixtures\n\n    mynewapp/               # The actual python package for your application\n         __init__.py\n        flow.py             # How patients move through your services\n        models.py           # Data models for your application\n        schema.py           # The list schemas for your application\n        settings.py         # Helpfully tweaked Django settings\n        tests.py            # Dummy unittests\n        urls.py             # Django Urlconf\n        wsgi.py\n\n        assets/             # Your static files directory\n        templates/          # Your template directory\n        migrations/         # Your Database migrations directory\n\n        opal.sqlite         # The Sqlite development database  Test it out  The scaffolding step has generated you a working project - so let's check that out  cd mynewapp\npython manage.py runserver  If you now visit  http://localhost:8000  in your browser, you should see the standard login screen:   The scaffolding step created you a superuser, so try logging in with the credentials:   Username:  super  Password:   super1   When you log in you should be presented with a welcome screen that shows you the three\nareas that are enabled by default - team lists, search and the admin area.   OPAL applications are a collection of single page Angular apps that talk to the Django\nserver-side layer via JSON APIs. The Team Lists and Search options here are two examples of\nfront-end Angular single page apps.  Team lists  Most clinical services will need at some stage to generate a list of patients - so OPAL provides\nthis functionality enabled by default.  The  list view  is a spreadhseet-style list of patients - try navigating\nto the list view and adding a patient with the  add patient  button.   Each column contains a different type of information about a patient, while each\nrow represents one patient.  \nStrictly speaking each row is an  episode \nof care for a patient - but we'll come to that in a second.  The columns you see initially are just a few of the standard clinical models that come with\nOPAL - for instance the Diagnosis model in your new application inherits from a model that\nlooks a lot like this:  class Diagnosis(EpisodeSubrecord):\n    condition         = ForeignKeyOrFreeText(Condition)\n    provisional       = models.BooleanField(default=False)\n    details           = models.CharField(max_length=255, blank=True)\n    date_of_diagnosis = models.DateField(blank=True, null=True)\n\n    class Meta:\n        abstract = True  Lookup Lists  You will notice that the condition field has a custom field type -  ForeignKeyOrFreeText .\nThis is a custom field type that we use with OPAL when we want to use a Lookup List .  Lookup Lists allow us to reference canonical lists of available terminology as a foreign key, while\nalso allowing synonymous terms, and a free text override. That means that we can ensure that\nwe record high quality coded data, while allowing users an easy way to enter unusual edge\ncases.  You'll need to import the data for a terminology before you can start to take advantage of that.\nFor now, let's use the reference data from elCID (An OPAL application maintained by Open Health Care):  wget https://raw.githubusercontent.com/openhealthcare/elcid/master/data/lookuplists/lookuplists.json -P data/lookuplists  \nBy convention, we store data in the  ./data/lookuplists  directory of our project.  Now let's import the data:  python manage.py load_lookup_lists -f data/lookuplists/lookuplists.json  Now refresh your application and try adding a new diagnosis to your patient. As you start to type in\nthe condition field, you'l see that the conditions we just imported appear as suggestions:   Add your own data models  So far we've begun to get a sense of the batteries-included parts of OPAL,\nbut before long, you're going to need to create models for your own needs.  Most OPAL models are  Subrecords  - they relate to either a patient, or\nan episode (an episode is for example, an admission to hospital).  Let's see how that works by creating a TODO list model that is assigned to\nepisodes of care. In your  mynewapp/models.py  :  class TODOItem(models.EpisodeSubrecord):\n    job       = fields.CharField(max_length=200)\n    due_date  = fields.DateField(blank=True, null=True)\n    details   = fields.TextField(blank=True, null=True)\n    completed = fields.BooleanField(default=False)  This is simply a Django model, apart from the parent class  models.EpisodeSubrecord \nwhich provides us with some extra functionality:   A relationship to an episode, linked to a patient  JSON APIs for creating, retrieving and updating it  Ensuring that the OPAL Angular layer knows it exists   Next, we're going to let OPAL take care of the boilerplate that we'll need to use this\nmodel in our application. From the commandline:  $ opal scaffold mynewapp  Let's take a look at what that did:   It created a Django migration  It created a detail template  mynewapp/templates/records/todo_item.html  It created a form template  mynewapp/templates/modals/todo_item_modal.html   Detail template  The default detail template simply displays each field on a new line:  span ng-show=\"item.job\" [[ item.job ]]  br / /span  span ng-show=\"item.due_date\" [[ item.due_date  | shortDate ]]  br / /span  span ng-show=\"item.details\" [[ item.details ]]  br / /span  span ng-show=\"item.completed\" [[ item.completed ]]  br / /span   Form template  The default form template will display each field on a new line, with some basic\nappropriate form field types set.\nIt uses the OPAL form helpers templatetag library.  {% extends 'modal_base.html' %}\n{% load forms %}\n{% block modal_body %}\n   form class=\"form-horizontal\" \n   {% input  label=\"Job\" model=\"editing.job\"  %}\n   {% datepicker  label=\"Due Date\" model=\"editing.due_date\"  %}\n   {% textarea  label=\"Details\" model=\"editing.details\"  %}\n   {% checkbox  label=\"Completed\" model=\"editing.completed\"  %}\n   /form \n{% endblock %}  Adding TODOs to our Team Lists  Now let's add our TODO list model as a column in the Spreadsheet-like list view.  The columns for team lists are set in  mynewapp/schema.py  as a list of models.  Open mynewapp/schemas.py and edit the  list_columns  variable to add  models.TODOItem  as\nthe final item:  list_columns = [\n    models.Demographics,\n    models.Location,\n    models.Allergies,\n    models.Diagnosis,\n    models.PastMedicalHistory,\n    models.Treatment,\n    models.Investigation,\n    models.TODOItem\n]  Refresh the lists page in your browser, and you'll see your new column on the end - add a\nTODO item, noting how we automatically get appropriate form types like datepickers and\ncheckboxes.  You can edit any entry in the list view by double clicking on it.  Tweaking the default scaffolding  The scaffolding templates are only really supposed to get you started - you'll often\nneed to tweak the templates they generate with whatever logic makes sense for your\napplication.  For us, you'll notice that the value of  TODOItem.completed  simply displays as false -\nwhich is not particularly useful. So let's update that using the OPAL Boxed filter . In  mynewapp/templates/records/todo_item.html \nchange the last line to look like this:  span ng-show=\"item.completed\" [[ item.completed | boxed ]]  br / /span   Set an Icon for your model  You'll notice that your new column is the only one without an icon - we set the icon by\nadding the following property to your  TODOItem  class:      _icon = 'fa fa-th-list'  Some other batteries included  Let's take a look at some of the other core functionality that we now have out of the box:  Search  By default, we also enable the search module, which allows you to search by patient name\nor unique identifier:   Detail views  We also have a detail view for our patients, which you can access via search results. This\nview will typically allow for a more detailed display and editing of all the events\ncomprising an activity of care than is available on the list page.   JSON APIs  OPAL automatically creates self-documenting JSON APIs for your interacting with the data\nin your application. You can inspect these APIs interactively at the url:  http://localhost:8000/api/v0.1/   What next?  This is just a glimpse at the full range of functionality that comes with OPAL - there is\nmuch more to discover in the  Topic Guides .", 
            "title": "Writing a clinical service with OPAL"
        }, 
        {
            "location": "/guides/topic-guides/", 
            "text": "OPAL Guides\n\n\nA list of all available topic guides.\n\n\nOPAL\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOPAL - Applications, Plugins\n\n\nHow OPAL components hang together.\n\n\n\n\n\n\nCommand line tool\n\n\nrunning admin tasks from the command line\n\n\n\n\n\n\nPlugins\n\n\nAvailable interfaces for OPAL plugins\n\n\n\n\n\n\nList of Plugins\n\n\nA list of available high quality plugins\n\n\n\n\n\n\n\n\nData and flow\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Model\n\n\nHow OPAL models clinical reality.\n\n\n\n\n\n\nFlow\n\n\nHooks to customise key moments in a patient's flow through a clinical service.\n\n\n\n\n\n\nRoles \n Permissions\n\n\nHow we handle authorization in OPAL\n\n\n\n\n\n\nTeams\n\n\nClinical teams in OPAL\n\n\n\n\n\n\nJSON API\n\n\nThe OPAL JSON API\n\n\n\n\n\n\nLookup Lists\n\n\nCanonical coded terms and ontologies\n\n\n\n\n\n\n\n\nPresentation and templating\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTemplates\n\n\nServer and client side templating\n\n\n\n\n\n\nStatic Files\n\n\nHow OPAL handles static files\n\n\n\n\n\n\nForms\n\n\nForms for entering or editing data\n\n\n\n\n\n\nEpisode Detail Views\n\n\nDetailed views of an episode of care\n\n\n\n\n\n\nPatient List Views\n\n\nLists of patients", 
            "title": "Guides"
        }, 
        {
            "location": "/guides/topic-guides/#opal-guides", 
            "text": "A list of all available topic guides.  OPAL           OPAL - Applications, Plugins  How OPAL components hang together.    Command line tool  running admin tasks from the command line    Plugins  Available interfaces for OPAL plugins    List of Plugins  A list of available high quality plugins     Data and flow           Data Model  How OPAL models clinical reality.    Flow  Hooks to customise key moments in a patient's flow through a clinical service.    Roles   Permissions  How we handle authorization in OPAL    Teams  Clinical teams in OPAL    JSON API  The OPAL JSON API    Lookup Lists  Canonical coded terms and ontologies     Presentation and templating           Templates  Server and client side templating    Static Files  How OPAL handles static files    Forms  Forms for entering or editing data    Episode Detail Views  Detailed views of an episode of care    Patient List Views  Lists of patients", 
            "title": "OPAL Guides"
        }, 
        {
            "location": "/reference/reference_guides/", 
            "text": "OPAL Reference material\n\n\nThe following reference guides are available:\n\n\nModels\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nopal.models.Episode model\n\n\nThe central Episode model\n\n\n\n\n\n\nopal.models.Patient\n\n\nThe Patient model\n\n\n\n\n\n\nopal.models.Subrecord base class\n\n\nBase class for subrecords of Episodes or Patients\n\n\n\n\n\n\nopal.models.Team\n\n\nTeams - Clinical units or stages in a Service\n\n\n\n\n\n\n\n\nOPAL Core\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nopal.application.OpalApplication\n\n\nOPAL Application objects\n\n\n\n\n\n\nopal.core.schemas\n\n\nSchemas - Dynamic columns for the table views\n\n\n\n\n\n\n\n\nAngular Services\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEpisode\n\n\nEpisode objects\n\n\n\n\n\n\nItem\n\n\nSubrecord objects\n\n\n\n\n\n\nPatientSummary\n\n\nPatient search result summaries\n\n\n\n\n\n\n\n\nHelper libraries\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe forms Templatetag library\n\n\nThe building blocks for OPAL forms\n\n\n\n\n\n\nThe record_panel templatetag\n\n\nRendering record panels.\n\n\n\n\n\n\nJavascript Helpers\n\n\nAngular filters and $rootScope methods\n\n\n\n\n\n\n\n\nOPAL Search module\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMaking Search Queries\n\n\nSearch query backends and helper functions\n\n\n\n\n\n\n\n\nMiscenlaneous documentation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUpgrading\n\n\nSearch query backends and helper functions", 
            "title": "Reference"
        }, 
        {
            "location": "/reference/reference_guides/#opal-reference-material", 
            "text": "The following reference guides are available:  Models           opal.models.Episode model  The central Episode model    opal.models.Patient  The Patient model    opal.models.Subrecord base class  Base class for subrecords of Episodes or Patients    opal.models.Team  Teams - Clinical units or stages in a Service     OPAL Core           opal.application.OpalApplication  OPAL Application objects    opal.core.schemas  Schemas - Dynamic columns for the table views     Angular Services           Episode  Episode objects    Item  Subrecord objects    PatientSummary  Patient search result summaries     Helper libraries           The forms Templatetag library  The building blocks for OPAL forms    The record_panel templatetag  Rendering record panels.    Javascript Helpers  Angular filters and $rootScope methods     OPAL Search module           Making Search Queries  Search query backends and helper functions     Miscenlaneous documentation           Upgrading  Search query backends and helper functions", 
            "title": "OPAL Reference material"
        }, 
        {
            "location": "/guides/components_overview/", 
            "text": "Components of an OPAL application\n\n\nThe OPAL ecosystem comprises several types of components - let's take a look at how they all\nhang together.\n\n\nCore OPAL framework\n\n\nThe core OPAL framework provides common patterns for writing clinical facing transactional \napplications. It is an opinionated approach, and amongst many other things, it gives you \nauthentication and login mechanisms, hooks for integration with other clinical systems, a \nfoundational \nClinical Data Model\n, self-documenting, open JSON APIs for your \ndata, a \nPermission framework\n and a pattern library for UX \ncomponents.\n\n\nIn addition to this, OPAL also provides some very common functionality as part of the core\nframework, such as Search, rendering lists of patients, viewing the detail and history of\nepisodes of care, as well as multi-user realtime updates.\n\n\nPlugins\n\n\nOPAL plugins are intended to provide high quality generic, composable, re-usable chunks of \nfunctionality that can be \"dropped in\" to an application. For example, installing the \n\nAnalytics\n plugin allows you to integrate\nyour application with Google or Piwik Analytics with a minimum of fuss. The \n\nReferral\n plugin provides the plumbing for \nbuilding complex inter-team referrals within an institution.\n\n\nPlugins have a \nrich plugin API\n they can hook into to aid the seamlessness, and\nmany examples can be found by inspecting the source of \nexisting plugins\n. \nThis includes defining patient Flows through the system, adding to the core JSON API, ovrerriding\ntemplates, adding patient Actions, as well as much more.\n\n\nTODO: Write the Plugin Tutorial\n\n\nApplications\n\n\nAn application is the collection of configuration and bespoke functionality that would be \nprovided to an individual institution - e.g. it's the thing that you would look to deploy.\n\n\nExample applications include \nelCID\n - a for managing\ninfection patients, or \nOPAL-Renal\n - an MDT \n \nhandover tool for Renal wards. \n\n\nA hospital might have multiple services running on one \nApplication\n, or multiple \nApplications\n\nthat integrate with one another.\n\n\nOpinionated but Pluggable\n\n\nOPAL is an Opinionated Framework. It expects the developer to structure code in a \ncertain way. \n\n\nOPAL expects features to be implemented as single page Angular.js applications, with the server\nmostly figuring as an API endpoint for reading and writing data.\n\n\nTODO: Expand on this\n\n\nThat said, the technology stack of Django, Angular \n Bootstrap allows the confident user a huge\ndegree of flexibility when writing their own applications and plugins. \n\n\nFor instance, there is nothing to \nstop\n a developer from implementing a part of the functionality \nin some other Javascript framework, and simply calling the \nJSON API\n. However, by\ndoing so, the developer will lose a large collection of pre-existing libraries, conventions et cetera.\nWhile possible, this approach is not likely to be officially supported in the medium term..", 
            "title": "Component Overview"
        }, 
        {
            "location": "/guides/components_overview/#components-of-an-opal-application", 
            "text": "The OPAL ecosystem comprises several types of components - let's take a look at how they all\nhang together.  Core OPAL framework  The core OPAL framework provides common patterns for writing clinical facing transactional \napplications. It is an opinionated approach, and amongst many other things, it gives you \nauthentication and login mechanisms, hooks for integration with other clinical systems, a \nfoundational  Clinical Data Model , self-documenting, open JSON APIs for your \ndata, a  Permission framework  and a pattern library for UX \ncomponents.  In addition to this, OPAL also provides some very common functionality as part of the core\nframework, such as Search, rendering lists of patients, viewing the detail and history of\nepisodes of care, as well as multi-user realtime updates.  Plugins  OPAL plugins are intended to provide high quality generic, composable, re-usable chunks of \nfunctionality that can be \"dropped in\" to an application. For example, installing the  Analytics  plugin allows you to integrate\nyour application with Google or Piwik Analytics with a minimum of fuss. The  Referral  plugin provides the plumbing for \nbuilding complex inter-team referrals within an institution.  Plugins have a  rich plugin API  they can hook into to aid the seamlessness, and\nmany examples can be found by inspecting the source of  existing plugins . \nThis includes defining patient Flows through the system, adding to the core JSON API, ovrerriding\ntemplates, adding patient Actions, as well as much more.  TODO: Write the Plugin Tutorial  Applications  An application is the collection of configuration and bespoke functionality that would be \nprovided to an individual institution - e.g. it's the thing that you would look to deploy.  Example applications include  elCID  - a for managing\ninfection patients, or  OPAL-Renal  - an MDT   \nhandover tool for Renal wards.   A hospital might have multiple services running on one  Application , or multiple  Applications \nthat integrate with one another.  Opinionated but Pluggable  OPAL is an Opinionated Framework. It expects the developer to structure code in a \ncertain way.   OPAL expects features to be implemented as single page Angular.js applications, with the server\nmostly figuring as an API endpoint for reading and writing data.  TODO: Expand on this  That said, the technology stack of Django, Angular   Bootstrap allows the confident user a huge\ndegree of flexibility when writing their own applications and plugins.   For instance, there is nothing to  stop  a developer from implementing a part of the functionality \nin some other Javascript framework, and simply calling the  JSON API . However, by\ndoing so, the developer will lose a large collection of pre-existing libraries, conventions et cetera.\nWhile possible, this approach is not likely to be officially supported in the medium term..", 
            "title": "Components of an OPAL application"
        }, 
        {
            "location": "/guides/command_line_tool/", 
            "text": "The OPAL Command line tool\n\n\nOPAL ships with a helpful command line tool that helps with administrative tasks.\n\n\nThe \nopal\n script should be on your system path if you installed OPAL via setup.py or \npip. You can check whether it is available by running this command: \n\n\n$ opal -v\n\n\n\nstartproject \nname\n\n\nCreates a new OPAL project.\n\n\nThis creates boilerplate and a default configuration for your new project, including\ncreating a new underlying Django project, updating default settings to be compatible\nwith OPAL, creating directories and code boilerplate, and running initial migrations.\n\n\nstartplugin \nname\n\n\nCreates boilerplate code, and directory structures for a new OPAL plugin.\n\n\nscaffold \nappname\n\n\nUse with new record models.\n\n\nCreates and runs automatic migrations, creates display and form (modal) templates.\n\n\ntest \nwhat\n\n\nRun our tests suites.\n\n\nDefaults to running both Python and Javascript tests.\n\n\nIf specified, will only run one specific kind of test.\n\n\n$ opal test py\n   $ opal test js\n\n\nWhen running Python tests, the \n-t\n or \n--test\n option allows the user to specify a single\ntest module, case or method to run.\n\n\n$ opal test py -t opal.tests.test_models", 
            "title": "Command Line tool"
        }, 
        {
            "location": "/guides/command_line_tool/#the-opal-command-line-tool", 
            "text": "OPAL ships with a helpful command line tool that helps with administrative tasks.  The  opal  script should be on your system path if you installed OPAL via setup.py or \npip. You can check whether it is available by running this command:   $ opal -v  startproject  name  Creates a new OPAL project.  This creates boilerplate and a default configuration for your new project, including\ncreating a new underlying Django project, updating default settings to be compatible\nwith OPAL, creating directories and code boilerplate, and running initial migrations.  startplugin  name  Creates boilerplate code, and directory structures for a new OPAL plugin.  scaffold  appname  Use with new record models.  Creates and runs automatic migrations, creates display and form (modal) templates.  test  what  Run our tests suites.  Defaults to running both Python and Javascript tests.  If specified, will only run one specific kind of test.  $ opal test py\n   $ opal test js  When running Python tests, the  -t  or  --test  option allows the user to specify a single\ntest module, case or method to run.  $ opal test py -t opal.tests.test_models", 
            "title": "The OPAL Command line tool"
        }, 
        {
            "location": "/guides/plugins/", 
            "text": "Writing Plugins\n\n\nOPAL Plugins are Django apps on the server side, and collections of angular.js\nmodels for the client. \n\n\nGetting started with your plugin\n\n\nThe OPAL commandline tool will bootstrap your plugin for you - just run: \n\n\n$ opal startplugin yourcoolplugin\n\n\n\nDefining teams\n\n\nAs a signal is fine.\nData migrations might work.\n\n\nDefining restricted team access is done by:\n\n\nAdding a method to your pluigin that takes one argument, a User object, and returning a set of\nextra teams that this user is allowed to see.\n\n\nDefining Schemas\n\n\nPlugins can define list schemas to be used to generate patient lists. \nThey should return a dictionary of lists of models from the\n\nlist_schemas\n method of the plugin class.\n\n\n# yourplugin/__init__.py\nfrom opal.core.plugins import OpalPlugin\n\nfrom yourplugin import models\n\nclass YourPlugin(OpalPlugin):\n    def list_schemas(self):\n        columns = [models.YourAwesomeModel, models.YourSecondModel, models.SomeOtherModel]\n        return {'yourplugin': {'default': columns}}\n\n\n\nDefining new flows\n\n\nPlugins can define flows. They should return a dictionary of flows from the \nflows() method of the plugin class.\n\n\nAdding URLS\n\n\nAdd an urls.py, then add to your plugin class as YourPlugin.urls\n\n\nNaturally, these can point to views in your plugin! \n\n\nAdding Javascript\n\n\nadd to static, then add to your plugin class as YourPlugin.javascripts\n\n\nThere are some restricted namespaces for these...\n\n\nAdding APIs\n\n\nOPAL uses Django Rest Framweork to provide APIs, and you may add to these from your plugin.\nBy convention, APIs live in \nyourplugin/api.py\n. You are expected to provide a\n\nrest_framework.viewsets.ViewSet\n subclass, which you then detail as the \n.apis\n attribute\nof your plugin.\n\n\n# yourplugin/api.py\nfrom rest_framework.viewsets import ViewSet\nfrom rest_framework.response import Response\n\nclass PingViewSet(ViewSet):\n    def list(self, request): return Response('pong')\n\n# yourplugin/__init__.py\nfrom opal.core.plugins import OpalPlugin\nfrom yourplugin import api\n\nclass YourPlugin(OpalPlugin):\n    apis = [\n        ('ping', api.PingViewSet)\n    ]\n\n\n\nThese APIs will then be available and self-documenting fom the standard OPAL url \n/api/v0.1/\n\n\nAdding Actions to the sidebar\n\n\nActions can be added to the sidebar by setting the \nactions\n attribute of your plugin.\nActions is expected to be an iterable of strings which are templates to be included in\nthe sidebar. By convention, actions will live in \n./templates/actions/\n .\n\n\n# __init__.py:\nclass Plugin(OpalPlugin):\n    actions = ('actions/javascript_alert.html', 'actions/dummy_button.html')\n\n\n\nAnd then in the template:\n\n\np ng-show=\"episode.category == 'YourEpisodeCategory'\"\n\n  \nbutton class=\"btn btn-primary\" ng-click=\"alert('Boom!')\"\n\n    \ni href=\"fa fa-warning\"\n/i\n\n    ALERT ME\n  \n/button\n    \n\n/p\n\n\n\n\nAdding dependencies globally to our angular modules\n\n\nDependencies listed in \nangular_module_deps\n will be added to all Angular modules (as long as they\nuse the OPAL.module() API. If not, you're on your own. We could monkey patch angular.module, but we\nwon't for now.\n\n\nInstalling plugins\n\n\nAdd to installed apps\nAdd to requirements if appropriate\n\n\nAdding extra markup to the \n tag\n\n\nAny templates you define in the property .head_extra will be included in the", 
            "title": "Plugins"
        }, 
        {
            "location": "/guides/plugins/#writing-plugins", 
            "text": "OPAL Plugins are Django apps on the server side, and collections of angular.js\nmodels for the client.   Getting started with your plugin  The OPAL commandline tool will bootstrap your plugin for you - just run:   $ opal startplugin yourcoolplugin  Defining teams  As a signal is fine.\nData migrations might work.  Defining restricted team access is done by:  Adding a method to your pluigin that takes one argument, a User object, and returning a set of\nextra teams that this user is allowed to see.  Defining Schemas  Plugins can define list schemas to be used to generate patient lists. \nThey should return a dictionary of lists of models from the list_schemas  method of the plugin class.  # yourplugin/__init__.py\nfrom opal.core.plugins import OpalPlugin\n\nfrom yourplugin import models\n\nclass YourPlugin(OpalPlugin):\n    def list_schemas(self):\n        columns = [models.YourAwesomeModel, models.YourSecondModel, models.SomeOtherModel]\n        return {'yourplugin': {'default': columns}}  Defining new flows  Plugins can define flows. They should return a dictionary of flows from the \nflows() method of the plugin class.  Adding URLS  Add an urls.py, then add to your plugin class as YourPlugin.urls  Naturally, these can point to views in your plugin!   Adding Javascript  add to static, then add to your plugin class as YourPlugin.javascripts  There are some restricted namespaces for these...  Adding APIs  OPAL uses Django Rest Framweork to provide APIs, and you may add to these from your plugin.\nBy convention, APIs live in  yourplugin/api.py . You are expected to provide a rest_framework.viewsets.ViewSet  subclass, which you then detail as the  .apis  attribute\nof your plugin.  # yourplugin/api.py\nfrom rest_framework.viewsets import ViewSet\nfrom rest_framework.response import Response\n\nclass PingViewSet(ViewSet):\n    def list(self, request): return Response('pong')\n\n# yourplugin/__init__.py\nfrom opal.core.plugins import OpalPlugin\nfrom yourplugin import api\n\nclass YourPlugin(OpalPlugin):\n    apis = [\n        ('ping', api.PingViewSet)\n    ]  These APIs will then be available and self-documenting fom the standard OPAL url  /api/v0.1/  Adding Actions to the sidebar  Actions can be added to the sidebar by setting the  actions  attribute of your plugin.\nActions is expected to be an iterable of strings which are templates to be included in\nthe sidebar. By convention, actions will live in  ./templates/actions/  .  # __init__.py:\nclass Plugin(OpalPlugin):\n    actions = ('actions/javascript_alert.html', 'actions/dummy_button.html')  And then in the template:  p ng-show=\"episode.category == 'YourEpisodeCategory'\" \n   button class=\"btn btn-primary\" ng-click=\"alert('Boom!')\" \n     i href=\"fa fa-warning\" /i \n    ALERT ME\n   /button      /p   Adding dependencies globally to our angular modules  Dependencies listed in  angular_module_deps  will be added to all Angular modules (as long as they\nuse the OPAL.module() API. If not, you're on your own. We could monkey patch angular.module, but we\nwon't for now.  Installing plugins  Add to installed apps\nAdd to requirements if appropriate  Adding extra markup to the   tag  Any templates you define in the property .head_extra will be included in the", 
            "title": "Writing Plugins"
        }, 
        {
            "location": "/guides/plugins_list/", 
            "text": "OPAL Plugins list\n\n\nThe OPAL ecosystem has a rich array of re-usable Open Source plugins that can be used as composable\nunits of functionality to build your application. This page lists some of the best available:\n\n\nopal.core.search\n\n\nThe Search plugin bundled with OPAL core provides a default database based search implementation \nfor your application, and is scheduled to provide hooks for e.g. using Elastic Search as your \nserach backend.\n\n\nopal.core.collaborative\n\n\nThe Collaborative plugin bundled with OPAL core provides a mechanism for providing realtime\ncollaborative editing of patient data within lists, by providing a streaming websocket link\nof updates from other open sessions. (Requires \nGlossolalia\n ).\n\n\nopal-opat\n\n\nThe \nOPAT\n plugin provides a set of teams, flows\nand record types for running a BSAC OPAT clinic.\n\n\nopal-research\n\n\nThe \nResearch\n plugin allows an OPAL application to be used as the\ndata collection method for multiple concurrent research studies, including researcher blinding, a \nstructured role \n permission framework.\n\n\nopal-walk-in\n\n\nThe \nWalk In\n plugin supports the operation of \ndrop in services within your institution, including registration, triage, escalation \n \ndischarge summaries.\n\n\nopal-wardround\n\n\nThe \nWardround\n plugin provides structured virtual\nward rounds - sequential subsets of patients matching arbitrary criteria that the user may step \nthrough in order.\n\n\nopal-dischargesummary\n\n\nThe \nDischarge Summary\n plugin allows the\nuser to generate templated letters from the data concerning an episode already held in the Application.\n\n\nopal-referral\n\n\nThe \nReferral\n plugin provides the plumbing for \nbuilding complex inter-team referrals within an institution.\n\n\nopal-dashboard\n\n\nThe \nDashboard\n plugin allows for realtime clinical \ndashboards featuring arbitrary metrics, displayed within your application.\n\n\nopal-observations\n\n\nThe \nObservations\n plugin caters for the recording and\ndisplay of electronic observations data.\n\n\nopal-analytics\n\n\nThe \nAnalytics\n plugin allows you to integrate\nyour application with Google or Piwik Analytics with a minimum of fuss.\n\n\nopal-guidelines\n\n\nThe \nGuidelines\n plugin presents contextual links to clinical\nguidelines in use at your institution when viewing records of patients whose condition matches those guidelines.\n\n\nCan be used with national or local guidelines.\n\n\nopal-iframe-api\n\n\nThe \nIframe Api\n plugin allows you to set up an api key. \nWith this Api key you can create templates to view subrecords for embedding in for example iframes.", 
            "title": "Plugin List"
        }, 
        {
            "location": "/guides/plugins_list/#opal-plugins-list", 
            "text": "The OPAL ecosystem has a rich array of re-usable Open Source plugins that can be used as composable\nunits of functionality to build your application. This page lists some of the best available:  opal.core.search  The Search plugin bundled with OPAL core provides a default database based search implementation \nfor your application, and is scheduled to provide hooks for e.g. using Elastic Search as your \nserach backend.  opal.core.collaborative  The Collaborative plugin bundled with OPAL core provides a mechanism for providing realtime\ncollaborative editing of patient data within lists, by providing a streaming websocket link\nof updates from other open sessions. (Requires  Glossolalia  ).  opal-opat  The  OPAT  plugin provides a set of teams, flows\nand record types for running a BSAC OPAT clinic.  opal-research  The  Research  plugin allows an OPAL application to be used as the\ndata collection method for multiple concurrent research studies, including researcher blinding, a \nstructured role   permission framework.  opal-walk-in  The  Walk In  plugin supports the operation of \ndrop in services within your institution, including registration, triage, escalation   \ndischarge summaries.  opal-wardround  The  Wardround  plugin provides structured virtual\nward rounds - sequential subsets of patients matching arbitrary criteria that the user may step \nthrough in order.  opal-dischargesummary  The  Discharge Summary  plugin allows the\nuser to generate templated letters from the data concerning an episode already held in the Application.  opal-referral  The  Referral  plugin provides the plumbing for \nbuilding complex inter-team referrals within an institution.  opal-dashboard  The  Dashboard  plugin allows for realtime clinical \ndashboards featuring arbitrary metrics, displayed within your application.  opal-observations  The  Observations  plugin caters for the recording and\ndisplay of electronic observations data.  opal-analytics  The  Analytics  plugin allows you to integrate\nyour application with Google or Piwik Analytics with a minimum of fuss.  opal-guidelines  The  Guidelines  plugin presents contextual links to clinical\nguidelines in use at your institution when viewing records of patients whose condition matches those guidelines.  Can be used with national or local guidelines.  opal-iframe-api  The  Iframe Api  plugin allows you to set up an api key. \nWith this Api key you can create templates to view subrecords for embedding in for example iframes.", 
            "title": "OPAL Plugins list"
        }, 
        {
            "location": "/guides/datamodel/", 
            "text": "The OPAL Data model\n\n\nThe OPAL data model allows for patients to have multiple sequential or concurrent\n\nEpisodes of care\n. Some information is linked to an \nEpisode\n, some is linked to\na \nPatient\n.\n\n\n\n\nLocation and TrackedModel abstract models\n\n\nLocation provides all the fields you might need to location a specific bed in a hospital\ni.e. category, hospital, ward, bed\n\n\nTrackedModel provides some basic audit fields created_by, created, updated_by, updated\nthe presumption is that these will be set by the update_to_dict model or manually in your\nview this is so backend modification can happen without having to worry about corrupting\nthe audit trail.\n\n\nPatients\n\n\nA \nPatient\n may have many \nEpisodes\n. An \nEpisode\n is something like an Inpatient admission,\na Telephone Liaison, care under an outpatient clinic, an appointment at a drop in clinic.\nApplications or plugins may define their own \nEpisode\n types, and a common pattern is to\nalter the display or available functionality by episode type. (e.g. You may associate\ntemplates for discharge summaries with particular episode types)\n\n\nA \nPatient\n will have \nSubrecords\n (such as e.g. Demographics) which follow them across multiple\nepisodes. These are information linked to a particular person, and should be implemented as\nDjango models that inherit from the \nopal.models.PatientSubrecord\n base class.\n\n\nEpisodes\n\n\nAn \nEpisode\n is linked to a \nPatient\n, and will contain some metadata about the type and date\nof the episode. The field \nEpisode.category\n stores the type of episode ('Inpatient', 'Outpatient', ...)\nwhile the fields \nEpisode.date_of_admission\n, \nEpisode.discharge_date\n, and \nEpisode.date_of_episode\n\nstore information about when the \nEpisode\n occurrs.\n\n\nAn \nEpisode\n will have \nSubrecords\n (such as e.g. Diagnosis) which are linked to this episode of\ncare. These should be implemented as Django models that inherit from the \nopal.models.EpisodeSubRecord\n\nbase class.\n\n\nRecords\n\n\nA \nSubrecord\n consists of a collection of fields that constitute a record. For example, one could\nimplement a Demograpics \nSubrecord\n as follows:\n\n\nclass Demographics(PatientSubrecord):\n    name             = models.CharField(max_length=255, blank=True)\n    hospital_number  = models.CharField(max_length=255, blank=True)\n    nhs_number       = models.CharField(max_length=255, blank=True,\n                                        null=True)\n    date_of_birth    = models.DateField(null=True, blank=True)\n    ethnicity        = models.CharField(max_length=255, blank=True,\n                                        null=True)\n    gender           = models.CharField(max_length=255, blank=True,\n                                        null=True)\n\n\n\nSubrecords also define various properties that will provide metadata about their\ndisplay or structure, which are documented in the\n\nSubrecord reference material\n\n\nLookup Lists\n\n\nOPAL comes with a set of clinical terminology data models out of the box. - we often\nwant to link our records to one of these - for example to record a type of condition\na patient might have, or a drug they are taking.\n\n\nFull documentation of these is available in the \nLookup lists\n documentation.", 
            "title": "Data Model"
        }, 
        {
            "location": "/guides/datamodel/#the-opal-data-model", 
            "text": "The OPAL data model allows for patients to have multiple sequential or concurrent Episodes of care . Some information is linked to an  Episode , some is linked to\na  Patient .   Location and TrackedModel abstract models  Location provides all the fields you might need to location a specific bed in a hospital\ni.e. category, hospital, ward, bed  TrackedModel provides some basic audit fields created_by, created, updated_by, updated\nthe presumption is that these will be set by the update_to_dict model or manually in your\nview this is so backend modification can happen without having to worry about corrupting\nthe audit trail.  Patients  A  Patient  may have many  Episodes . An  Episode  is something like an Inpatient admission,\na Telephone Liaison, care under an outpatient clinic, an appointment at a drop in clinic.\nApplications or plugins may define their own  Episode  types, and a common pattern is to\nalter the display or available functionality by episode type. (e.g. You may associate\ntemplates for discharge summaries with particular episode types)  A  Patient  will have  Subrecords  (such as e.g. Demographics) which follow them across multiple\nepisodes. These are information linked to a particular person, and should be implemented as\nDjango models that inherit from the  opal.models.PatientSubrecord  base class.  Episodes  An  Episode  is linked to a  Patient , and will contain some metadata about the type and date\nof the episode. The field  Episode.category  stores the type of episode ('Inpatient', 'Outpatient', ...)\nwhile the fields  Episode.date_of_admission ,  Episode.discharge_date , and  Episode.date_of_episode \nstore information about when the  Episode  occurrs.  An  Episode  will have  Subrecords  (such as e.g. Diagnosis) which are linked to this episode of\ncare. These should be implemented as Django models that inherit from the  opal.models.EpisodeSubRecord \nbase class.  Records  A  Subrecord  consists of a collection of fields that constitute a record. For example, one could\nimplement a Demograpics  Subrecord  as follows:  class Demographics(PatientSubrecord):\n    name             = models.CharField(max_length=255, blank=True)\n    hospital_number  = models.CharField(max_length=255, blank=True)\n    nhs_number       = models.CharField(max_length=255, blank=True,\n                                        null=True)\n    date_of_birth    = models.DateField(null=True, blank=True)\n    ethnicity        = models.CharField(max_length=255, blank=True,\n                                        null=True)\n    gender           = models.CharField(max_length=255, blank=True,\n                                        null=True)  Subrecords also define various properties that will provide metadata about their\ndisplay or structure, which are documented in the Subrecord reference material  Lookup Lists  OPAL comes with a set of clinical terminology data models out of the box. - we often\nwant to link our records to one of these - for example to record a type of condition\na patient might have, or a drug they are taking.  Full documentation of these is available in the  Lookup lists  documentation.", 
            "title": "The OPAL Data model"
        }, 
        {
            "location": "/guides/flow/", 
            "text": "Flow hooks in OPAL\n\n\nOPAL provides various hooks that developers can use to customise behaviour at certain key points in a \npatient's journey through a clinical service - for example when a patient is discharged.\n\n\nThese hooks are associated with verbs \nenter\n, \nexit\n.\n\n\nThe Flow schema\n\n\nYour application scaffold will have created a file at \n./yourapp/flow.py\n. This file will contain a variable \nflow\n, \nwhich is rendered as the flow schema for your application. Instances are defined as pairs of Angular controllers and\ntemplates used to render them.\n\n\nflows = {\n    'default': {\n        'enter': {\n            'controller': 'HospitalNumberCtrl',\n            'template'  : '/templates/modals/hospital_number.html/'\n        },\n        'exit': {\n            'controller': 'DischargeEpisodeCtrl',\n            'template'  : '/templates/modals/discharge_episode.html/'\n        }\n    }\n}\n\n\n\nThe enter verb\n\n\nThe enter verb is called when a patient is added to a service - for instance by adding a patient to a team list.\n\n\nIt should be an Angular controller that expects to be initialised as a modal.\n\n\nThe exit verb\n\n\nThe exit verb is called when a patient is added to a service - for instance when we discharge a patient, or end\none phase of a clinical pathway.\n\n\nIt should be an Angular controller that expects to be initialised as a modal.", 
            "title": "Flow"
        }, 
        {
            "location": "/guides/flow/#flow-hooks-in-opal", 
            "text": "OPAL provides various hooks that developers can use to customise behaviour at certain key points in a \npatient's journey through a clinical service - for example when a patient is discharged.  These hooks are associated with verbs  enter ,  exit .  The Flow schema  Your application scaffold will have created a file at  ./yourapp/flow.py . This file will contain a variable  flow , \nwhich is rendered as the flow schema for your application. Instances are defined as pairs of Angular controllers and\ntemplates used to render them.  flows = {\n    'default': {\n        'enter': {\n            'controller': 'HospitalNumberCtrl',\n            'template'  : '/templates/modals/hospital_number.html/'\n        },\n        'exit': {\n            'controller': 'DischargeEpisodeCtrl',\n            'template'  : '/templates/modals/discharge_episode.html/'\n        }\n    }\n}  The enter verb  The enter verb is called when a patient is added to a service - for instance by adding a patient to a team list.  It should be an Angular controller that expects to be initialised as a modal.  The exit verb  The exit verb is called when a patient is added to a service - for instance when we discharge a patient, or end\none phase of a clinical pathway.  It should be an Angular controller that expects to be initialised as a modal.", 
            "title": "Flow hooks in OPAL"
        }, 
        {
            "location": "/guides/roles_and_permissions/", 
            "text": "Roles \n Permissions in OPAL\n\n\nOPAL provides some global per-user flags, which are set in the UserProfile model, as well\nas more detailed permissions available via roles.\n\n\nThe UserProfile model\n\n\nSome global properties about Users are set in the \nopal.models.UserProfile\n\nmodel.\n\n\nUserProflie._can_extract\n\n\nBoolean flag to determine whether this user is allowed to download data extracts\nfrom the system\n\n\nUserProflie._force_password_change\n\n\nBoolean flag to determine whether we would like to force this user to change\ntheir password on their next login. This defaults to \nTrue\n when the \nUser\n is \nfirst created.\n\n\nUserProfile._readonly\n\n\nBoolean flag to determine whether this user has readonly access.\n\n\nUserProfile._restricted_only\n\n\nBoolean flag to determine whether this user should be only shown \nteams\n for which they\nhave explicitly been given permission to view or whether they should also see the list of\ngeneral access teams.\n\n\nUserProfile.get_roles()\n\n\nReturn a dictionary of roles in various contexts for our user\n\n\nprofile.get_roles() # -\n\n{\n    'default': ['doctor'],\n    'some_research_study': ['Clinical Lead']\n}\n\n\n\nUserProfile.get_teams()\n\n\nReturn a list of \nTeam\n objects that this user should be allowed to see.\n\n\nRoles\n\n\nA user may be given a particular role. These can be either global - in which case they are \nreturned in the 'default' section of the roles dict from \nget_roles()\n, or specific to \na \nteam\n.", 
            "title": "Roles & Permissions"
        }, 
        {
            "location": "/guides/roles_and_permissions/#roles-permissions-in-opal", 
            "text": "OPAL provides some global per-user flags, which are set in the UserProfile model, as well\nas more detailed permissions available via roles.  The UserProfile model  Some global properties about Users are set in the  opal.models.UserProfile \nmodel.  UserProflie._can_extract  Boolean flag to determine whether this user is allowed to download data extracts\nfrom the system  UserProflie._force_password_change  Boolean flag to determine whether we would like to force this user to change\ntheir password on their next login. This defaults to  True  when the  User  is \nfirst created.  UserProfile._readonly  Boolean flag to determine whether this user has readonly access.  UserProfile._restricted_only  Boolean flag to determine whether this user should be only shown  teams  for which they\nhave explicitly been given permission to view or whether they should also see the list of\ngeneral access teams.  UserProfile.get_roles()  Return a dictionary of roles in various contexts for our user  profile.get_roles() # - \n{\n    'default': ['doctor'],\n    'some_research_study': ['Clinical Lead']\n}  UserProfile.get_teams()  Return a list of  Team  objects that this user should be allowed to see.  Roles  A user may be given a particular role. These can be either global - in which case they are \nreturned in the 'default' section of the roles dict from  get_roles() , or specific to \na  team .", 
            "title": "Roles &amp; Permissions in OPAL"
        }, 
        {
            "location": "/guides/teams/", 
            "text": "Teams\n\n\nEpisodes of care are assigned to n teams - broadly a tab in the list view.\n\n\nTeams are a two level hierarchy currently used to define both clinical services, and stages within a\nclinical service.\n\n\nThe common case is that a team represents a clincal service e.g. \nInfectious Disieases\n or \nRenal\n, \nwhile a sub-team might represent e.g. Infectious Diseases \nInpatients\n or \nOutpatients\n.\n\n\nTeams may be inactive, in which case they are not displayed.\n\n\nTeams may be restricted in which they only appear for a subset of users.\n\n\nThe logic for showing restricted teams is implemented via plugins.\n\n\nTeams are assigned to episodes via a \nTagging", 
            "title": "Teams"
        }, 
        {
            "location": "/guides/teams/#teams", 
            "text": "Episodes of care are assigned to n teams - broadly a tab in the list view.  Teams are a two level hierarchy currently used to define both clinical services, and stages within a\nclinical service.  The common case is that a team represents a clincal service e.g.  Infectious Disieases  or  Renal , \nwhile a sub-team might represent e.g. Infectious Diseases  Inpatients  or  Outpatients .  Teams may be inactive, in which case they are not displayed.  Teams may be restricted in which they only appear for a subset of users.  The logic for showing restricted teams is implemented via plugins.  Teams are assigned to episodes via a  Tagging", 
            "title": "Teams"
        }, 
        {
            "location": "/guides/json_api/", 
            "text": "The OPAL JSON API\n\n\nOPAL features a rich, self documenting set of open JSON APIs.\n\n\nOPAL applications are generally simply a collection of Browser-based clients\nfor these APIs.\n\n\nOPAL uses Django Rest Framework to provide it's APIs.\n\n\nYou may examine the API of any running OPAL application by navigating to the url \n/api/v0.1/\n\n\nAdding your own APIs\n\n\nYou can add your own APIs to the OPAL API namespae \nfrom plugins\n or \nby registering them directly with the router.\n\n\nfrom rest_framework.viewsets import ViewSet\nfrom rest_framework.response import Response\nfrom opal.core.api import router\n\n\nclass PingViewSet(ViewSet):\n    def list(self, request): return Response('pong')\n\nrouter.register('ping', PingViewSet)", 
            "title": "JSON API"
        }, 
        {
            "location": "/guides/json_api/#the-opal-json-api", 
            "text": "OPAL features a rich, self documenting set of open JSON APIs.  OPAL applications are generally simply a collection of Browser-based clients\nfor these APIs.  OPAL uses Django Rest Framework to provide it's APIs.  You may examine the API of any running OPAL application by navigating to the url  /api/v0.1/  Adding your own APIs  You can add your own APIs to the OPAL API namespae  from plugins  or \nby registering them directly with the router.  from rest_framework.viewsets import ViewSet\nfrom rest_framework.response import Response\nfrom opal.core.api import router\n\n\nclass PingViewSet(ViewSet):\n    def list(self, request): return Response('pong')\n\nrouter.register('ping', PingViewSet)", 
            "title": "The OPAL JSON API"
        }, 
        {
            "location": "/guides/lookup_lists/", 
            "text": "OPAL Lookup Lists\n\n\nLookup Lists allow us to reference canonical lists of available terminology as a foreign key, while\nalso allowing synonymous terms, and a free text override.\n\n\nAdding a lookup list\n\n\nLookup lists are subclasses of \nopal.core.lookuplists.LookupList\n. Typically, a specific named\nlookup list will not need to do anything other than define a class that inherits from the base\nclass.\n\n\nThe custom field type \nopal.core.fields.ForeignKeyOrFreeText\n allows you to build interfaces\nthat cater for synonyms, and also allow the user to enter a free text string that is not in\nthe lookup list.\n\n\n# yourapp.models\n\nfrom django.db import models\nfrom opal.core import lookuplists\nfrom opal.core.fields import ForeignKeyOrFreeText\nfrom opal.models import EpisodeSubrecord\n\nclass TreatmentType(lookuplists.LookupList): pass\n\nclass Treatment(EpisodeSubrecord):\n    treatment = ForeignKeyOrFreeText(TreatmentType)\n    notes     = models.CharField(max_length=200)\n# yourapp.models\n\n\n\nWhen you create your lookup list, you are creating a new model, so you will need a new migration\nto accompany it.\n\n\n$ python manage.py schemamigration --atuo yourapp\n$ python manage.py migrate yourapp\n\n\n\nThe lookup list will automatically be added to the admin.\n\n\nManagement commands\n\n\nOPAL ships with some managemnent commands for importing and exporting lookup lists\n\n\ndump_lookup_lists\n\n\nPrints all lookuplists as JSON to stdout.\n\n\nload_lookup_lists -f [filename]\n\n\nLoads lookup lists in the OPAL JSON format.\n\n\ndelete_all_lookuplists\n\n\nDeletes all currently lookuplist values and related synonyms", 
            "title": "Lookup Lists"
        }, 
        {
            "location": "/guides/lookup_lists/#opal-lookup-lists", 
            "text": "Lookup Lists allow us to reference canonical lists of available terminology as a foreign key, while\nalso allowing synonymous terms, and a free text override.  Adding a lookup list  Lookup lists are subclasses of  opal.core.lookuplists.LookupList . Typically, a specific named\nlookup list will not need to do anything other than define a class that inherits from the base\nclass.  The custom field type  opal.core.fields.ForeignKeyOrFreeText  allows you to build interfaces\nthat cater for synonyms, and also allow the user to enter a free text string that is not in\nthe lookup list.  # yourapp.models\n\nfrom django.db import models\nfrom opal.core import lookuplists\nfrom opal.core.fields import ForeignKeyOrFreeText\nfrom opal.models import EpisodeSubrecord\n\nclass TreatmentType(lookuplists.LookupList): pass\n\nclass Treatment(EpisodeSubrecord):\n    treatment = ForeignKeyOrFreeText(TreatmentType)\n    notes     = models.CharField(max_length=200)\n# yourapp.models  When you create your lookup list, you are creating a new model, so you will need a new migration\nto accompany it.  $ python manage.py schemamigration --atuo yourapp\n$ python manage.py migrate yourapp  The lookup list will automatically be added to the admin.  Management commands  OPAL ships with some managemnent commands for importing and exporting lookup lists  dump_lookup_lists  Prints all lookuplists as JSON to stdout.  load_lookup_lists -f [filename]  Loads lookup lists in the OPAL JSON format.  delete_all_lookuplists  Deletes all currently lookuplist values and related synonyms", 
            "title": "OPAL Lookup Lists"
        }, 
        {
            "location": "/guides/templates/", 
            "text": "Templates in OPAL\n\n\nOPAL uses a mixture of Django and Angular templates.\n\n\nAngular templates\n\n\nIn order to be compatible with Django templating, we use the \n[[ ... ]]\n notation for\nAngular interpolation, which allows us to mix Django template interpolation in templates\ndesigned to be rendered by Angular on the client side.\n\n\n!-- app_details_snippet.html --\n\n{{ OPAL_BRAND_NAME }} [[ OPAL_VERSION ]]\n\n\n\nGeneric Template URL\n\n\nOn many occasions we simply want to fetch a template from the server in our Angular code\nwithout any further processing. OPAL provides a default catchall HTML template url which\nwill render .html files direct from disk.\n\n\n# opal.urls\n\nurl(r'templates/(?P\ntemplate_name\n[a-z_/]+.html)', views.RawTemplateView.as_view())\n\n\n\nSo if our template is at \n./myapp/templates/foo/bar.html\n, then the url \n/templates/foo/bar.html\n\nwill return it.\n\n\nPartials\n\n\nOPAL has some built in template partials that are generally useful.\n\n\npartials/_episode_summary_table.html\n\n\nA table that renders the name, hospital number, date of birth, date of admission \n discharge date\nfor a list of episodes. Expects episodes to be stored in \n$scope.results\n. Will limit the \nnumber of results to \n$scope.limit\n .Clicking on an individual \nepisode in the table will call \n$scope.jumpToEpisode(episode)\n.\n\n\n// Controller Fn\nfunction($scope, episodes, $location){\n    $scope.limit = 10;\n    $scope.results = episodes;\n    $scope.jumpToEpisode = function(episode){ $location.path('/episode/'+episode.id }\n}", 
            "title": "Templates"
        }, 
        {
            "location": "/guides/templates/#templates-in-opal", 
            "text": "OPAL uses a mixture of Django and Angular templates.  Angular templates  In order to be compatible with Django templating, we use the  [[ ... ]]  notation for\nAngular interpolation, which allows us to mix Django template interpolation in templates\ndesigned to be rendered by Angular on the client side.  !-- app_details_snippet.html -- \n{{ OPAL_BRAND_NAME }} [[ OPAL_VERSION ]]  Generic Template URL  On many occasions we simply want to fetch a template from the server in our Angular code\nwithout any further processing. OPAL provides a default catchall HTML template url which\nwill render .html files direct from disk.  # opal.urls\n\nurl(r'templates/(?P template_name [a-z_/]+.html)', views.RawTemplateView.as_view())  So if our template is at  ./myapp/templates/foo/bar.html , then the url  /templates/foo/bar.html \nwill return it.  Partials  OPAL has some built in template partials that are generally useful.  partials/_episode_summary_table.html  A table that renders the name, hospital number, date of birth, date of admission   discharge date\nfor a list of episodes. Expects episodes to be stored in  $scope.results . Will limit the \nnumber of results to  $scope.limit  .Clicking on an individual \nepisode in the table will call  $scope.jumpToEpisode(episode) .  // Controller Fn\nfunction($scope, episodes, $location){\n    $scope.limit = 10;\n    $scope.results = episodes;\n    $scope.jumpToEpisode = function(episode){ $location.path('/episode/'+episode.id }\n}", 
            "title": "Templates in OPAL"
        }, 
        {
            "location": "/guides/static_files/", 
            "text": "Static Files in OPAL\n\n\nAs with any Javascript heavy application, OPAL apps can quickly accumulate large numbers\nof static files. OPAL ships with the \nDjango Compressor\n\nlibrary out of the box, and uses it to manage the Javascript asset pipeline.\n\n\nDo consult the excellent Django Compresor documentation for more details on exactly how this process works.", 
            "title": "Static Files"
        }, 
        {
            "location": "/guides/static_files/#static-files-in-opal", 
            "text": "As with any Javascript heavy application, OPAL apps can quickly accumulate large numbers\nof static files. OPAL ships with the  Django Compressor \nlibrary out of the box, and uses it to manage the Javascript asset pipeline.  Do consult the excellent Django Compresor documentation for more details on exactly how this process works.", 
            "title": "Static Files in OPAL"
        }, 
        {
            "location": "/guides/forms/", 
            "text": "Forms\n\n\nEditing Records\n\n\nThe editing of records is a key component of any OPAL application. A key pattern is to edit\nor create an individual record in a modal containing the form for just that record. OPAL provides\nthe Angular Controller \nopal.controllers.EditItemCtrl\n for doing just this\n\n\nModal template selection\n\n\nModal templates live in \n./templates/modals/*\n. For the Demographics subrecord we would\nlook in \n./templates/modals/demographics_modal.html\n - which is also available from the URL\n\n/templates/modals/demographics_modal.html\n. Modal or form templates can be customised per\nteam or sub-team, with template selection handled by the \n.get_form_template\n classmethod of your\nSubrecord.\n\n\nTeam customised subrecords are retrieved from the url e.g.\n\n/templates/modals/demographics_modal.html/team/subteam/\n and will look for templates in \n\n./templates/modals/team/subteam/demographics_modal.html\n\n\nClient side Validation\n\n\nClient side validation for forms requires a pattern and a help block \n uses ng-pattern, ng-disabled (https://docs.angularjs.org/api/ng/directive/input)\n\n\nHelpers\n\n\nOPAL contains a number of helpers for developing forms and input modals.\n\n\nMany of these are located in the forms template tag library, which is a\nDjango templatetag library that understands the context of common patterns with\nOPAL for creating forms and modals. \n\n\nIt provides helpers for various input types that will allow you to render consistent\nforms, with less verbose templates.\n\n\n{% load forms %}\n\nform class=\"form-horizontal\"\n\n  {% input \"autofocus\" label=\"Destination\" model=\"editing.destination\" lookuplist=\"destination_list\" %}\n  {% datepicker label=\"Date\" model=\"editing.date\" %}\n  {% checkbox label=\"Alone?\" model=\"editing.alone\" %}\n\n/form\n\n\n\n\nFor full documentation of the options, please see the \nForm templatetags reference material", 
            "title": "Forms"
        }, 
        {
            "location": "/guides/forms/#forms", 
            "text": "Editing Records  The editing of records is a key component of any OPAL application. A key pattern is to edit\nor create an individual record in a modal containing the form for just that record. OPAL provides\nthe Angular Controller  opal.controllers.EditItemCtrl  for doing just this  Modal template selection  Modal templates live in  ./templates/modals/* . For the Demographics subrecord we would\nlook in  ./templates/modals/demographics_modal.html  - which is also available from the URL /templates/modals/demographics_modal.html . Modal or form templates can be customised per\nteam or sub-team, with template selection handled by the  .get_form_template  classmethod of your\nSubrecord.  Team customised subrecords are retrieved from the url e.g. /templates/modals/demographics_modal.html/team/subteam/  and will look for templates in  ./templates/modals/team/subteam/demographics_modal.html  Client side Validation  Client side validation for forms requires a pattern and a help block   uses ng-pattern, ng-disabled (https://docs.angularjs.org/api/ng/directive/input)  Helpers  OPAL contains a number of helpers for developing forms and input modals.  Many of these are located in the forms template tag library, which is a\nDjango templatetag library that understands the context of common patterns with\nOPAL for creating forms and modals.   It provides helpers for various input types that will allow you to render consistent\nforms, with less verbose templates.  {% load forms %} form class=\"form-horizontal\" \n  {% input \"autofocus\" label=\"Destination\" model=\"editing.destination\" lookuplist=\"destination_list\" %}\n  {% datepicker label=\"Date\" model=\"editing.date\" %}\n  {% checkbox label=\"Alone?\" model=\"editing.alone\" %} /form   For full documentation of the options, please see the  Form templatetags reference material", 
            "title": "Forms"
        }, 
        {
            "location": "/guides/episode_detail_views/", 
            "text": "Opal Episode Detail Views\n\n\nBy defualt, the OPAL core provides each \nepisode\n with a detail view.\n\n\nTemplate selection\n\n\nEpisode detail templates live in \n./templates/detail/*\n. In order to select the appropriate\ntemplate for a given episode, OPAL looks first for the template for the episode category - so\nfor \ninpatient\n episodes, that would be  \ndetail/inpatient.html\n.\n\n\nExtending detail/detail_base.html\n\n\nThere is a base template for detail views which you can inherit from -  \ndetail/detail_base.html\n.\nThis template has the following blocks: \n\n\n{% block heading %}\n\n\nThe main page heading. Will default to the name of the patient.\n\n\n{% block subheading %}\n\n\nThe page subheading. Will default to the hospital number and DOB of the patient.\n\n\n{% block sidebar_panels %}\n\n\nAdd your own panels to the sidebar\n\n\n{% block left_column %}\n\n\nThe left hand column of the main view.\n\n\n{% block right_column %}\n\n\nThe right hand column of the main view.\n\n\nRendering Record Panels\n\n\nA frequent pattern when constructing detail views is to render a panel for a particular \nSubrecord\n \ntype. The panels templatetag library contains some useful helpers for rendering panels based on \nmodels.\n\n\n{% load panels %}\n{% record_panel Diagnosis %}\n\n\n\nThe above code will render a panel for your episode, including the \nSubrecord\n detail template for\neach instance, and allowing editing, deletion and creation of instances of your \nSubrecord\n. \n\n\nYou may also consult the Detailed \nreference documentation\n for \nRecord Panels.", 
            "title": "Episode Detail Views"
        }, 
        {
            "location": "/guides/episode_detail_views/#opal-episode-detail-views", 
            "text": "By defualt, the OPAL core provides each  episode  with a detail view.  Template selection  Episode detail templates live in  ./templates/detail/* . In order to select the appropriate\ntemplate for a given episode, OPAL looks first for the template for the episode category - so\nfor  inpatient  episodes, that would be   detail/inpatient.html .  Extending detail/detail_base.html  There is a base template for detail views which you can inherit from -   detail/detail_base.html .\nThis template has the following blocks:   {% block heading %}  The main page heading. Will default to the name of the patient.  {% block subheading %}  The page subheading. Will default to the hospital number and DOB of the patient.  {% block sidebar_panels %}  Add your own panels to the sidebar  {% block left_column %}  The left hand column of the main view.  {% block right_column %}  The right hand column of the main view.  Rendering Record Panels  A frequent pattern when constructing detail views is to render a panel for a particular  Subrecord  \ntype. The panels templatetag library contains some useful helpers for rendering panels based on \nmodels.  {% load panels %}\n{% record_panel Diagnosis %}  The above code will render a panel for your episode, including the  Subrecord  detail template for\neach instance, and allowing editing, deletion and creation of instances of your  Subrecord .   You may also consult the Detailed  reference documentation  for \nRecord Panels.", 
            "title": "Opal Episode Detail Views"
        }, 
        {
            "location": "/guides/list_views/", 
            "text": "OPAL Patient List views\n\n\nOPAL core provides support for displaying spreadsheet-style lists of patients.\n\n\nA list is comprised of a set of record types to display, and their ordering.\n\n\nRegistering a list\n\n\nYour application will have a \nschema_module\n defined in its object. This is expected\nto be a python module with a \nlist_schemas\n object. The \nlist_schemas\n object should\nbe a dictionary of team/subteam names that point to lists of models.\n\n\nIf you are using the OPAL scaffolding commands from the command line interface, this\nwill have been generated for you.\n\n\nlist_columns = [models.Demographics, models.Diagnosis]\nlist_columns_micro = [models.Demographics, models.Diagnosis, models.Antimicrobial]\nlist_columns_id_liaison = [models.Demographics, models.Diagnosis, models.Travel]\n\nlist_schemas = {\n    'default': list_columns,\n    'microbiology': {\n        'default': list_columns_micro,\n    },\n    'infectious_diseases': {\n        'id_liaison': list_columns_id_liaison\n    }\n}\n\n\n\nRegistering a list via a plugin\n\n\nPlugins may register their own schemas by returning dictionaries of similar structure\nto the above from the \nOpalPlugin.list_schemas()\n \nmethod\n.\n\n\nTemplate selection\n\n\nThe list view is constructed by rendering a column for each record, in the order \ndefined in the schema, and a row for each episode in the list.\n\n\nThe template for each cell should live in \n./templates/records/*\n. In order to \nselect the appropriate template for a given episode, OPAL looks in the following\nlocations:\n\n\nrecords/{record_name}.html\nrecords/{team}/{record_name}.html\nrecords/{team}/{subteam}/{record_name}.html", 
            "title": "Patient List Views"
        }, 
        {
            "location": "/guides/list_views/#opal-patient-list-views", 
            "text": "OPAL core provides support for displaying spreadsheet-style lists of patients.  A list is comprised of a set of record types to display, and their ordering.  Registering a list  Your application will have a  schema_module  defined in its object. This is expected\nto be a python module with a  list_schemas  object. The  list_schemas  object should\nbe a dictionary of team/subteam names that point to lists of models.  If you are using the OPAL scaffolding commands from the command line interface, this\nwill have been generated for you.  list_columns = [models.Demographics, models.Diagnosis]\nlist_columns_micro = [models.Demographics, models.Diagnosis, models.Antimicrobial]\nlist_columns_id_liaison = [models.Demographics, models.Diagnosis, models.Travel]\n\nlist_schemas = {\n    'default': list_columns,\n    'microbiology': {\n        'default': list_columns_micro,\n    },\n    'infectious_diseases': {\n        'id_liaison': list_columns_id_liaison\n    }\n}  Registering a list via a plugin  Plugins may register their own schemas by returning dictionaries of similar structure\nto the above from the  OpalPlugin.list_schemas()   method .  Template selection  The list view is constructed by rendering a column for each record, in the order \ndefined in the schema, and a row for each episode in the list.  The template for each cell should live in  ./templates/records/* . In order to \nselect the appropriate template for a given episode, OPAL looks in the following\nlocations:  records/{record_name}.html\nrecords/{team}/{record_name}.html\nrecords/{team}/{subteam}/{record_name}.html", 
            "title": "OPAL Patient List views"
        }, 
        {
            "location": "/reference/episode/", 
            "text": "opal.models.Episode\n\n\nThe \nopal.models.Episode\n class represents an episode of care for a patient. This can be either\nan inpatient stay, an outpatient treatment, a telephone liaison, an appointment at a clinic,\nor any other arbitrarially defined period of care.\n\n\nFields\n\n\nEpisode.category\n\n\nThe category of this episode - e.g. inpatient, outpatient et cetera.\nThis defaults to whatever is set on your application's subclass of\n\nopal.core.application.OpalApplication\n - which itseflf defaults to 'inpatient'.\n\n\nEpisode.patient\n\n\nA foreign key relationship to the patient for whom this episode concerns.\n\n\nEpisode.active\n\n\nA boolean to provide a quick lookup for whether this is an active or closed episode.\n\n\nEpisode.date_of_admission\n\n\nIf this is an inpatient episode, the date of admission.\n\n\nEpisode.discharge_date\n\n\nIf this is an inpatient episode, the date of discharge.\n\n\nEpisode.date_of_episode\n\n\nIf this is an episode that occurs on one date (like a clinic visit or telephone liaison), the\ndate of that event.\n\n\nEpisode.consistency_token\n\n\nA (automatically generated) hash of the above fields. This is used for detecting concurrent edits.\n\n\nMethods\n\n\nThe Episode model has the following methods:\n\n\nEpisode.to_dict\n\n\nReturn a dictionary of field value pairs for this episode\n\n\nepisode.to_dict(user)\n\n\n\nArguments:\n\n\n\n\nuser\n The User for whom we want to serialise this episode\n\n\n\n\nKeywords:\n\n\n\n\nshallow\n Boolean to indicate whether we want just this episode, or also a sorted set of\nprevious and subsequent episodes\n\n\n\n\nEpisode.get_tag_names\n\n\nArguments:\n\n\n\n\nuser\n The user for whom we want the tag names.\n\n\n\n\nReturn the current active tag names for this Episode as strings.\n\n\nepisode.get_tag_names(user)\n# ['mine', 'infectioncontrol']\n\n\n\nEpisode.set_tag_names\n\n\nArguments:\n\n\n\n\ntag_names\n The list of tags that we want to be active for this Episode.\n\n\nuser\n The user for whom we want the tag names.\n\n\n\n\nReturn the current active tag names for this Episode as strings.\n\n\nepisode.set_tag_names(['mine', 'infectioncontrol'], user)\n\n\n\nManager\n\n\nThe custom manager for Episodes has the following methods:\n\n\nEpisode.objects.serialised()\n\n\nReturn a set of serialised episodes.\n\n\nEpisode.objects.serialised(User, [episode, ...], historic_tags=False)\n\n\n\nArguments:\n\n\n\n\nuser\n The User for whom we want to serialise this episode\n\n\nepisodes\n An iterable of Episode instances\n\n\n\n\nKeywords:\n\n\n\n\nhistoric_tags\n A boolean to indicate whether the user desires historic or just current tags to\nbe serialised", 
            "title": "The Episode model"
        }, 
        {
            "location": "/reference/episode/#opalmodelsepisode", 
            "text": "The  opal.models.Episode  class represents an episode of care for a patient. This can be either\nan inpatient stay, an outpatient treatment, a telephone liaison, an appointment at a clinic,\nor any other arbitrarially defined period of care.  Fields  Episode.category  The category of this episode - e.g. inpatient, outpatient et cetera.\nThis defaults to whatever is set on your application's subclass of opal.core.application.OpalApplication  - which itseflf defaults to 'inpatient'.  Episode.patient  A foreign key relationship to the patient for whom this episode concerns.  Episode.active  A boolean to provide a quick lookup for whether this is an active or closed episode.  Episode.date_of_admission  If this is an inpatient episode, the date of admission.  Episode.discharge_date  If this is an inpatient episode, the date of discharge.  Episode.date_of_episode  If this is an episode that occurs on one date (like a clinic visit or telephone liaison), the\ndate of that event.  Episode.consistency_token  A (automatically generated) hash of the above fields. This is used for detecting concurrent edits.  Methods  The Episode model has the following methods:  Episode.to_dict  Return a dictionary of field value pairs for this episode  episode.to_dict(user)  Arguments:   user  The User for whom we want to serialise this episode   Keywords:   shallow  Boolean to indicate whether we want just this episode, or also a sorted set of\nprevious and subsequent episodes   Episode.get_tag_names  Arguments:   user  The user for whom we want the tag names.   Return the current active tag names for this Episode as strings.  episode.get_tag_names(user)\n# ['mine', 'infectioncontrol']  Episode.set_tag_names  Arguments:   tag_names  The list of tags that we want to be active for this Episode.  user  The user for whom we want the tag names.   Return the current active tag names for this Episode as strings.  episode.set_tag_names(['mine', 'infectioncontrol'], user)  Manager  The custom manager for Episodes has the following methods:  Episode.objects.serialised()  Return a set of serialised episodes.  Episode.objects.serialised(User, [episode, ...], historic_tags=False)  Arguments:   user  The User for whom we want to serialise this episode  episodes  An iterable of Episode instances   Keywords:   historic_tags  A boolean to indicate whether the user desires historic or just current tags to\nbe serialised", 
            "title": "opal.models.Episode"
        }, 
        {
            "location": "/reference/patient/", 
            "text": "opal.models.Patient\n\n\nmethods\n\n\ncreate_episode\n\n\nReturns a new \nEpisode\n for this patient.\n\n\nto_dict\n\n\nReturn the dictionary representation of this patient - suitable for serialization.\n\n\npatient.to_dict(user)", 
            "title": "Patient"
        }, 
        {
            "location": "/reference/patient/#opalmodelspatient", 
            "text": "methods  create_episode  Returns a new  Episode  for this patient.  to_dict  Return the dictionary representation of this patient - suitable for serialization.  patient.to_dict(user)", 
            "title": "opal.models.Patient"
        }, 
        {
            "location": "/reference/subrecords/", 
            "text": "OPAL Subrecords\n\n\nOPAL Subrecords are models that relate to either Patients or Episodes, and inherit from\nbase classes \nopal.models.PatientSubrecord\n or \nopal.models.EpisodeSubrecord\n\n\nProperties\n\n\nSubrecord._icon\n\n\nString that provides the name of the icon to use for forms, column headings etc.\n\n\nclass Demographics(PatientSubrecord):\n    _icon = 'fa fa-user'\n\n\n\nSubrecord._is_singleton\n\n\nBoolean that determines whether this subrecord is a singleton.\nThere may only be one of each singleton Subrecord, which is created whth the parent.\n\n\nclass Demographics(PatientSubrecord):\n    _is_singleton = True\n\n\n\nFor this case, when a \nPatient\n is created, an empty \nDemographics\n instance will \nautomatically be created.\n\n\nSubrecord._list_limit\n\n\nInteger to indicate the maximum number of entries to display in list view for this\nmodel. Useful for record types where many entries will accrue, or where display is\nparticularly verbose.\n\n\nclass BloodPressureReading(EpisodeSubrecord):\n    _list_limit = 3\n\n\n\nSubrecord._modal\n\n\nString to indicate a non-default modal size to be used for editing this \nSubrecord\n.\nValid options are: 'lg', 'sm'. Typically used for complex forms or the display of\nadditional contextually sensitive information when editing or entering data.\n\n\nclass Antimicrobial(EpisodeSubrecord):\n    _modal = 'lg'\n\n\n\nSubrecord._sort\n\n\nName of the field by which we want to sort these records when displaying.\n\n\nclass Antimicrobial(EpisodeSubrecord):\n    _sort = 'start_date'\n\n\n\nSubrecord._title\n\n\nString we would like to use for user-facing display of this record type.\n\n\nclass Antimicrobial(EpisodeSubrecord):\n    _title = 'Abx'\n\n\n\nSubrecord.pid_fields\n\n\nAn iterable of strings that correspond to fieldnames that contain Patient Identifiable Data (PID).\n\n\nThis is used when creating data extracts to exclude PID from e.g. CSV downloads.\n\n\nMethods\n\n\nSubrecord.get_display_template()\n\n\nClassmethod to locate the active display templte for our record.\n\n\nReturns the name of the template or None.\n\n\nKeywords:\n\n\n\n\nteam\n Optional team to check for form customisations\n\n\nsubteam\n Optional subteam to check for form customisations\n\n\n\n\nSubrecord.get_form_template()\n\n\nClassmethod to locate the active template for our record. Returns the name of a template or None.\n\n\nKeywords: \n\n\n\n\nteam\n Optional team to check for form customisations\n\n\nsubteam\n Optional subteam to check for form customisations", 
            "title": "Subrecords"
        }, 
        {
            "location": "/reference/subrecords/#opal-subrecords", 
            "text": "OPAL Subrecords are models that relate to either Patients or Episodes, and inherit from\nbase classes  opal.models.PatientSubrecord  or  opal.models.EpisodeSubrecord  Properties  Subrecord._icon  String that provides the name of the icon to use for forms, column headings etc.  class Demographics(PatientSubrecord):\n    _icon = 'fa fa-user'  Subrecord._is_singleton  Boolean that determines whether this subrecord is a singleton.\nThere may only be one of each singleton Subrecord, which is created whth the parent.  class Demographics(PatientSubrecord):\n    _is_singleton = True  For this case, when a  Patient  is created, an empty  Demographics  instance will \nautomatically be created.  Subrecord._list_limit  Integer to indicate the maximum number of entries to display in list view for this\nmodel. Useful for record types where many entries will accrue, or where display is\nparticularly verbose.  class BloodPressureReading(EpisodeSubrecord):\n    _list_limit = 3  Subrecord._modal  String to indicate a non-default modal size to be used for editing this  Subrecord .\nValid options are: 'lg', 'sm'. Typically used for complex forms or the display of\nadditional contextually sensitive information when editing or entering data.  class Antimicrobial(EpisodeSubrecord):\n    _modal = 'lg'  Subrecord._sort  Name of the field by which we want to sort these records when displaying.  class Antimicrobial(EpisodeSubrecord):\n    _sort = 'start_date'  Subrecord._title  String we would like to use for user-facing display of this record type.  class Antimicrobial(EpisodeSubrecord):\n    _title = 'Abx'  Subrecord.pid_fields  An iterable of strings that correspond to fieldnames that contain Patient Identifiable Data (PID).  This is used when creating data extracts to exclude PID from e.g. CSV downloads.  Methods  Subrecord.get_display_template()  Classmethod to locate the active display templte for our record.  Returns the name of the template or None.  Keywords:   team  Optional team to check for form customisations  subteam  Optional subteam to check for form customisations   Subrecord.get_form_template()  Classmethod to locate the active template for our record. Returns the name of a template or None.  Keywords:    team  Optional team to check for form customisations  subteam  Optional subteam to check for form customisations", 
            "title": "OPAL Subrecords"
        }, 
        {
            "location": "/reference/team/", 
            "text": "opal.models.Team\n\n\nFields\n\n\nname\n\n\nThe slug version of the team name to be used in urls and schemas.\n\n\nShould only have letters and underscores\n\n\ntitle\n\n\nThe human facing title of this Team\n\n\nparent\n\n\nForeignKey to this Team's parent if one exists\n\n\nactive\n\n\nBoolean to determine whether this Team is active.\n\n\nDefault = True\n\n\norder\n\n\nInteger that allows admin users to set the ordering of teams.\n\n\nrestricted\n\n\nBoolean field to indicate that this team is restricted to only a subset of users.\n\n\nDefault = False\n\n\ndirect_add\n\n\nBoolean field to indicate whether we should show this field in the Teams modal.\n\n\nClass Methods\n\n\nrestricted_teams\n\n\nGiven a user, return the restricted teams this user can access.\n\n\nTeam.restricted_teams(user)\n\n\n\nfor_user\n\n\nReturn the set of teams this user has access to.\n\n\nTeam.for_user(user)\n\n\n\nProperties\n\n\nhas_subteams\n\n\nBoolean that is True if this Team has Subteams.", 
            "title": "Team"
        }, 
        {
            "location": "/reference/team/#opalmodelsteam", 
            "text": "Fields  name  The slug version of the team name to be used in urls and schemas.  Should only have letters and underscores  title  The human facing title of this Team  parent  ForeignKey to this Team's parent if one exists  active  Boolean to determine whether this Team is active.  Default = True  order  Integer that allows admin users to set the ordering of teams.  restricted  Boolean field to indicate that this team is restricted to only a subset of users.  Default = False  direct_add  Boolean field to indicate whether we should show this field in the Teams modal.  Class Methods  restricted_teams  Given a user, return the restricted teams this user can access.  Team.restricted_teams(user)  for_user  Return the set of teams this user has access to.  Team.for_user(user)  Properties  has_subteams  Boolean that is True if this Team has Subteams.", 
            "title": "opal.models.Team"
        }, 
        {
            "location": "/reference/opal_application/", 
            "text": "opal.application.OpalApplication\n\n\nThe base class for your main application entrypoints is opal.application.OpalApplication.\n\n\nYou must subclass this in order for OPAL to discover your application.\n\n\nIf you started your OPAL project via \n$ opal startproject yourproject\n then this will have been\ngenerated for you, and located in \nyourproject/yourproject/__init__.py\n\n\nschema_module\n\n\nflow_module\n\n\njavascripts\n\n\nactions\n\n\nmenuitems\n\n\nA list of items to add to the top level menu\n\n\ndefault_episode_category\n\n\nThe default category is either 'inpatient', but can be overridden in the \nOpalApplication\n subclass for your implementation.", 
            "title": "OpalApplication"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationopalapplication", 
            "text": "The base class for your main application entrypoints is opal.application.OpalApplication.  You must subclass this in order for OPAL to discover your application.  If you started your OPAL project via  $ opal startproject yourproject  then this will have been\ngenerated for you, and located in  yourproject/yourproject/__init__.py  schema_module  flow_module  javascripts  actions  menuitems  A list of items to add to the top level menu  default_episode_category  The default category is either 'inpatient', but can be overridden in the  OpalApplication  subclass for your implementation.", 
            "title": "opal.application.OpalApplication"
        }, 
        {
            "location": "/reference/episode_service/", 
            "text": "The Episode service\n\n\nThe \nEpisode\n service in \nopal.services\n provides us with core functionality related\nto interacting with episodes in the client.\n\n\nConstructor\n\n\nThe Episode service is instantiated with the Episode data that comes back from the\nEpisode JSON API.\n\n\nvar episode = new Episode(json_data);\n\n\n\nMethods\n\n\nEpisode.getTags\n\n\nReturn a list of the current tags this episode has as strings.\n\n\nepisode.getTags();\n// ['mine', 'infectioncontrol']\n\n\n\nEpisode.hasTag\n\n\nPredicate function that determines whether the episode is tagged with a given tag.\n\n\nArguments:\n\n\n\n\ntag\n: The tag you are interested in.\n\n\n\n\nEpisode.newItem\n\n\nInstantiate a new subrecord for this episode of a given type.\n\n\nArguments: \n\n\n\n\nrecordName\n: The name of the type of record you want to instantiate.\n\n\n\n\nExample usage: \n\n\nepisode.newItem('diagnosis');\n// item (an Item() instance.", 
            "title": "Episode service"
        }, 
        {
            "location": "/reference/episode_service/#the-episode-service", 
            "text": "The  Episode  service in  opal.services  provides us with core functionality related\nto interacting with episodes in the client.  Constructor  The Episode service is instantiated with the Episode data that comes back from the\nEpisode JSON API.  var episode = new Episode(json_data);  Methods  Episode.getTags  Return a list of the current tags this episode has as strings.  episode.getTags();\n// ['mine', 'infectioncontrol']  Episode.hasTag  Predicate function that determines whether the episode is tagged with a given tag.  Arguments:   tag : The tag you are interested in.   Episode.newItem  Instantiate a new subrecord for this episode of a given type.  Arguments:    recordName : The name of the type of record you want to instantiate.   Example usage:   episode.newItem('diagnosis');\n// item (an Item() instance.", 
            "title": "The Episode service"
        }, 
        {
            "location": "/reference/item_service/", 
            "text": "The Item service\n\n\nThe \nItem\n service in \nopal.services\n provides us with core functionality related\nto interacting with subrecord in the client.\n\n\nMethods\n\n\nItem.makeCopy\n\n\nReturns a clone of the editable fields + consistency token so that\nwe can then update them in isolation elsewhere.\n\n\nItem.save\n\n\nSaves attributes to the server.\n\n\nitem.save(data_to_save);", 
            "title": "Item service"
        }, 
        {
            "location": "/reference/item_service/#the-item-service", 
            "text": "The  Item  service in  opal.services  provides us with core functionality related\nto interacting with subrecord in the client.  Methods  Item.makeCopy  Returns a clone of the editable fields + consistency token so that\nwe can then update them in isolation elsewhere.  Item.save  Saves attributes to the server.  item.save(data_to_save);", 
            "title": "The Item service"
        }, 
        {
            "location": "/reference/patient_summary_service/", 
            "text": "The PatientSummary service\n\n\nThe \nPatientSummary\n service in \nopal.services\n provides us with core\nfunctionality related to interacting with patient search results in the client.\n\n\nConstructor\n\n\nThe PatientSummary service is instantiated with the Patient search result data\nthat comes back from the Patient search JSON API.\n\n\nvar patient_summary = new PatientSummary(json_data);", 
            "title": "Patient summary service"
        }, 
        {
            "location": "/reference/patient_summary_service/#the-patientsummary-service", 
            "text": "The  PatientSummary  service in  opal.services  provides us with core\nfunctionality related to interacting with patient search results in the client.  Constructor  The PatientSummary service is instantiated with the Patient search result data\nthat comes back from the Patient search JSON API.  var patient_summary = new PatientSummary(json_data);", 
            "title": "The PatientSummary service"
        }, 
        {
            "location": "/reference/form_templatetags/", 
            "text": "Form Helpers\n\n\nOPAL comes with a selection of templatetags that can help you with the\nrepetitive task of generating Bootstrap and OPAL compatible markup for\nyour forms.\n\n\n{% checkbox ... %}\n\n\nGenerates a checkbox\n\n\nKeywords:\n\n\n\n\nlabel\n The Label with which to describe this field\n\n\nmodel\n The model which we are editing (This is a string that references an in-scope Angular variable)\n\n\ndisabled\n If this exists, we use this as the expression for the ng-disabled directive\n\n\n\n\n{% datepicker ... %}\n\n\nGenerates a datepicker\n\n\nKeywords: \n\n\n\n\nlabel\n The Label with which to describe this field\n\n\nmodel\n The model which we are editing (This is a string that references an in-scope Angular variable)\n\n\nshow\n  A string that contains an Angular expression for the ng-show directive\n\n\nhide\n  A string that contains an Angular expression for the ng-hide directive\n\n\nrequired\n Label to show when we're required\n\n\nmindate\n Expression to use to set the minimum possible date\n\n\n\n\n{% input ... %}\n\n\nGenerates an Input\n\n\nKeywords: \n\n\n\n\nlabel\n The Label with which to describe this field\n\n\nmodel\n The model which we are editing (This is a string that references an in-scope Angular variable)\n\n\nshow\n  A string that contains an Angular expression for the ng-show directive\n\n\nhide\n  A string that contains an Angular expression for the ng-hide directive\n\n\nlookuplist\n an Angular expression that evaluates to an array containing the lookuplist values\n\n\nrequired\n Label to show when we're required\n\n\nenter\n expression to evaluate if the user presses return when in this input\n\n\nmaxlength\n maximum number of characters for this input. Will render the form invalid and display help text if exceeded.\n\n\n\n\n{% radio ... %}\n\n\nGenerates an inline radio input\n\n\nKeywords: \n\n\n\n\nlabel\n The Label with which to describe this input\n\n\nmodel\n The model which we are editing (This is a string that references an in-scope Angular variable)\n\n\nshow\n  A string that contains an Angular expression for the ng-show directive\n\n\nhide\n  A string that contains an Angular expression for the ng-hide directive\n\n\nlookuplist\n an Angular expression that evaluates to an array containing the radio values\n\n\n\n\n{% select ... %}\n\n\nGenerates an inline select input\n\n\nKeywords: \n\n\n\n\nlabel\n The Label with which to describe this input\n\n\nmodel\n The model which we are editing (This is a string that references an in-scope Angular variable)\n\n\nshow\n  A string that contains an Angular expression for the ng-show directive\n\n\nhide\n  A string that contains an Angular expression for the ng-hide directive\n\n\nlookuplist\n an Angular expression that evaluates to an array containing the radio values\n\n\nother\n A boolean parameter that if true, provides a free text option when 'Other' is selected\n\n\nhelp\n a template to use as the contents of a help popover\n\n\n\n\n{% textarea ... %}\n\n\nGenerates an inline textarea input\n\n\nKeywords: \n\n\n\n\nlabel\n The Label with which to describe this input\n\n\nmodel\n The model which we are editing (This is a string that references an in-scope Angular variable)\n\n\nshow\n  A string that contains an Angular expression for the ng-show directive\n\n\nhide\n  A string that contains an Angular expression for the ng-hide directive\n\n\n\n\n{% icon \"icon-name\" %}\n\n\nWe assume that the icon is one of the available glyphicon or Font Awesome icons.\n\n\n{% icon \"fa-user-md\" %}", 
            "title": "Form helpers"
        }, 
        {
            "location": "/reference/form_templatetags/#form-helpers", 
            "text": "OPAL comes with a selection of templatetags that can help you with the\nrepetitive task of generating Bootstrap and OPAL compatible markup for\nyour forms.  {% checkbox ... %}  Generates a checkbox  Keywords:   label  The Label with which to describe this field  model  The model which we are editing (This is a string that references an in-scope Angular variable)  disabled  If this exists, we use this as the expression for the ng-disabled directive   {% datepicker ... %}  Generates a datepicker  Keywords:    label  The Label with which to describe this field  model  The model which we are editing (This is a string that references an in-scope Angular variable)  show   A string that contains an Angular expression for the ng-show directive  hide   A string that contains an Angular expression for the ng-hide directive  required  Label to show when we're required  mindate  Expression to use to set the minimum possible date   {% input ... %}  Generates an Input  Keywords:    label  The Label with which to describe this field  model  The model which we are editing (This is a string that references an in-scope Angular variable)  show   A string that contains an Angular expression for the ng-show directive  hide   A string that contains an Angular expression for the ng-hide directive  lookuplist  an Angular expression that evaluates to an array containing the lookuplist values  required  Label to show when we're required  enter  expression to evaluate if the user presses return when in this input  maxlength  maximum number of characters for this input. Will render the form invalid and display help text if exceeded.   {% radio ... %}  Generates an inline radio input  Keywords:    label  The Label with which to describe this input  model  The model which we are editing (This is a string that references an in-scope Angular variable)  show   A string that contains an Angular expression for the ng-show directive  hide   A string that contains an Angular expression for the ng-hide directive  lookuplist  an Angular expression that evaluates to an array containing the radio values   {% select ... %}  Generates an inline select input  Keywords:    label  The Label with which to describe this input  model  The model which we are editing (This is a string that references an in-scope Angular variable)  show   A string that contains an Angular expression for the ng-show directive  hide   A string that contains an Angular expression for the ng-hide directive  lookuplist  an Angular expression that evaluates to an array containing the radio values  other  A boolean parameter that if true, provides a free text option when 'Other' is selected  help  a template to use as the contents of a help popover   {% textarea ... %}  Generates an inline textarea input  Keywords:    label  The Label with which to describe this input  model  The model which we are editing (This is a string that references an in-scope Angular variable)  show   A string that contains an Angular expression for the ng-show directive  hide   A string that contains an Angular expression for the ng-hide directive   {% icon \"icon-name\" %}  We assume that the icon is one of the available glyphicon or Font Awesome icons.  {% icon \"fa-user-md\" %}", 
            "title": "Form Helpers"
        }, 
        {
            "location": "/reference/record_panel_templatetag/", 
            "text": "The record_panel templatetag.\n\n\nRender a panel for a given record that will allow the user to view, create, update and delete instances.\n\n\nThe record panel template expects the relevant Angular \n$scope\n to have \nnewNamedItem(name, index)\n, \n\neditNamedItem(name, index)\n and \ndeleteNamedItem(name, index)\n methods implemented. Default \nimplementations of these are available from the \nEpisodeDetailMixin\n.\n\n\n{% load panels %}\n{% record_panel Diagnosis %}\n\n\n\nKeywords: \n\n\n\n\nname\n: The programatic name for this model.\n\n\ntitle\n: The display title for this panel\n\n\ndetail_template\n: The display template to use. Defaults to Subrecord.get_detail_template()\n\n\neditable\n: Whether this panel should allow editing. Defaults to True.", 
            "title": "Record panel templatetag"
        }, 
        {
            "location": "/reference/record_panel_templatetag/#the-record_panel-templatetag", 
            "text": "Render a panel for a given record that will allow the user to view, create, update and delete instances.  The record panel template expects the relevant Angular  $scope  to have  newNamedItem(name, index) ,  editNamedItem(name, index)  and  deleteNamedItem(name, index)  methods implemented. Default \nimplementations of these are available from the  EpisodeDetailMixin .  {% load panels %}\n{% record_panel Diagnosis %}  Keywords:    name : The programatic name for this model.  title : The display title for this panel  detail_template : The display template to use. Defaults to Subrecord.get_detail_template()  editable : Whether this panel should allow editing. Defaults to True.", 
            "title": "The record_panel templatetag."
        }, 
        {
            "location": "/reference/javascript_helpers/", 
            "text": "OPAL Javascript Helpers\n\n\n$rootScope methods\n\n\nOPAL provides some methods on the Angular $rootScope object.\n\n\nopen_modal\n\n\n$rootScope.open_modal(controller, template, size, {episode: episode})\n\n\n\nOpen an arbitrary controller in a modal, passing in the name of the controller,\nthe url for the template, the size of the modal window (either 'sm' or 'lg').\n\n\nYou may also pass through a dictionary of items to resolve.\n\n\nAngular Filters\n\n\nOPAL provides some buit-in Angular filters for your project to use.\n\n\nshortDate\n\n\nDisplays a date as DD/MM if it's this year, else DD/MM/YYYY\n\n\nhhmm\n\n\nDisplays the hours \n minutes portion of a javascript Date object as HH:MM\n\n\nboxed\n\n\nDisplays Boolean fields as a checkbox (e.g. either [ ] or [X])\n\n\n[[ item.boolean_field | boxed]]", 
            "title": "Javascript helpers"
        }, 
        {
            "location": "/reference/javascript_helpers/#opal-javascript-helpers", 
            "text": "$rootScope methods  OPAL provides some methods on the Angular $rootScope object.  open_modal  $rootScope.open_modal(controller, template, size, {episode: episode})  Open an arbitrary controller in a modal, passing in the name of the controller,\nthe url for the template, the size of the modal window (either 'sm' or 'lg').  You may also pass through a dictionary of items to resolve.  Angular Filters  OPAL provides some buit-in Angular filters for your project to use.  shortDate  Displays a date as DD/MM if it's this year, else DD/MM/YYYY  hhmm  Displays the hours   minutes portion of a javascript Date object as HH:MM  boxed  Displays Boolean fields as a checkbox (e.g. either [ ] or [X])  [[ item.boolean_field | boxed]]", 
            "title": "OPAL Javascript Helpers"
        }, 
        {
            "location": "/reference/schemas/", 
            "text": "OPAL Schemas\n\n\nOpal Schemas allow dynamic representation of columns within a table\n\n\nget_all_list_schema_classes\n\n\nreturns a dictionary to a list of classes of all the plugins\n(the classes are the columns inc column headers)", 
            "title": "Schemas"
        }, 
        {
            "location": "/reference/schemas/#opal-schemas", 
            "text": "Opal Schemas allow dynamic representation of columns within a table  get_all_list_schema_classes  returns a dictionary to a list of classes of all the plugins\n(the classes are the columns inc column headers)", 
            "title": "OPAL Schemas"
        }, 
        {
            "location": "/reference/search_queries/", 
            "text": "opal.core.search.queries\n\n\nThis module provides our base classes for query backends as well as helper functions.\n\n\nepisodes_for_user\n\n\nGiven an iterable of EPISODES and a USER, return a filtered list of episodes that this user has\nthe permissions to know about.\n\n\nfiltered_episodes = episodes_for_user(episodes, user)", 
            "title": "Search Queries"
        }, 
        {
            "location": "/reference/search_queries/#opalcoresearchqueries", 
            "text": "This module provides our base classes for query backends as well as helper functions.  episodes_for_user  Given an iterable of EPISODES and a USER, return a filtered list of episodes that this user has\nthe permissions to know about.  filtered_episodes = episodes_for_user(episodes, user)", 
            "title": "opal.core.search.queries"
        }, 
        {
            "location": "/reference/upgrading/", 
            "text": "Upgrading Your OPAL Application\n\n\nThis document provides instructions for specific steps required to upgrading your OPAL\napplication to a later version where there are extra steps required.\n\n\n4.X -\n 5.x\n\n\nMigrations\n\n\nBefore upgrading from 4.x to 5.x you should ensure that you have upgraded from South\nto Djangomigrations.\n\n\n$ rm yourapp/migrations/*\n$ python manage.py makemigrations yourapp\n$ python manage.py migrate yourapp --fake-initial\n\n\n\nOPAL\n\n\nNext you will need to upgrade the OPAL version itself.\n\n\nHow you do this depends on how you have configured your application, but updating your\nrequirements.txt to update the version should work. This will also update FFS and Django\nAxes as well as adding Python Dateutil.\n\n\n-e git://github.com/openhealthcare/opal.git@v0.5.6#egg=opal\n\n\n\nMigrations.\n\n\nOPAL has fresh migrations in 0.5.x, which we should run. There are also changes to the\nbase abstract model classes (to add created/updated timestamps) so you'll need to create\nfresh migrations for your own application.\n\n\n$ python manage.py migrate\n$ python manage.py makemigrations yourapp\n$ python manage.py migrate yourapp\n\n\n\nAt this stage you'll want to commit your new migrations, as well as any changes to your\napplication's requirements file.\n\n\nTags\n\n\nAs of 0.5.5, old tags in OPAL are stored directly on the Tagging model rather than via\nDjano Reversion. We can import those old tags by doing the following.\n\n\n$ python manage.py shell\n\n\n from opal.models import Tagging\n\n Tagging.import_from_reversion()\n\n\n\nDeployment\n\n\nThe first time you deploy your upgraded application you'll need to run the following\ncommands to upgrade your database:\n\n\n$ python manage.py migrate --fake-initial\n\n\n\nYou'll also have to repeat the Tagging step once for each deployment.", 
            "title": "Upgrading"
        }, 
        {
            "location": "/reference/upgrading/#upgrading-your-opal-application", 
            "text": "This document provides instructions for specific steps required to upgrading your OPAL\napplication to a later version where there are extra steps required.  4.X -  5.x  Migrations  Before upgrading from 4.x to 5.x you should ensure that you have upgraded from South\nto Djangomigrations.  $ rm yourapp/migrations/*\n$ python manage.py makemigrations yourapp\n$ python manage.py migrate yourapp --fake-initial  OPAL  Next you will need to upgrade the OPAL version itself.  How you do this depends on how you have configured your application, but updating your\nrequirements.txt to update the version should work. This will also update FFS and Django\nAxes as well as adding Python Dateutil.  -e git://github.com/openhealthcare/opal.git@v0.5.6#egg=opal  Migrations.  OPAL has fresh migrations in 0.5.x, which we should run. There are also changes to the\nbase abstract model classes (to add created/updated timestamps) so you'll need to create\nfresh migrations for your own application.  $ python manage.py migrate\n$ python manage.py makemigrations yourapp\n$ python manage.py migrate yourapp  At this stage you'll want to commit your new migrations, as well as any changes to your\napplication's requirements file.  Tags  As of 0.5.5, old tags in OPAL are stored directly on the Tagging model rather than via\nDjano Reversion. We can import those old tags by doing the following.  $ python manage.py shell  from opal.models import Tagging  Tagging.import_from_reversion()  Deployment  The first time you deploy your upgraded application you'll need to run the following\ncommands to upgrade your database:  $ python manage.py migrate --fake-initial  You'll also have to repeat the Tagging step once for each deployment.", 
            "title": "Upgrading Your OPAL Application"
        }
    ]
}